{
  "manifests": {
    "Asm, assert": {
      "display_name": "Asm, assert",
      "filename_extension": [
        ".asm",
        ".h",
        ".c"
      ],
      "image_name": "cyberdojofoundation/nasm_assert:2f2fe4a",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "make"
        },
        "hiker.asm": {
          "content": "global answer\r\n\r\nsection .text\r\nanswer:\r\n    mov eax, 6\r\n    mov ebx, 9\r\n    imul ebx\r\n    ret"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n"
        },
        "hiker.tests.c": {
          "content": "#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n    assert(answer() == 42);\n}\n\nstatic const char * green_traffic_light_pattern(void)\n{\n    return \"All tests passed\";\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    puts(green_traffic_light_pattern());\n}\n"
        },
        "makefile": {
          "content": "CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\nASM_FILES = $(wildcard *.asm)\nCOMPILED_ASM_FILES = $(patsubst %.asm,%.asm_o,$(ASM_FILES))\n\ntest: makefile $(COMPILED_H_FILES) $(C_FILES) $(COMPILED_ASM_FILES)\n\t@gcc $(C_FLAGS) $(C_FILES) $(COMPILED_ASM_FILES) -o $@\n\t@./$@\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<\n\n%.asm_o: %.asm\n\t@nasm -f elf64 -o $@ $<\n"
        }
      }
    },
    "BCPL, all_tests_passed": {
      "display_name": "BCPL, all_tests_passed",
      "filename_extension": [
        ".b"
      ],
      "image_name": "cyberdojofoundation/bcpl_all_tests_passed:cb2166b",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": ". /distribution/BCPL/cintcode/os/linux/setbcplenv\ncintsys -c \"bcpl hiker.test.b to test\"\ncintsys -c \"test\"\n"
        },
        "hiker.b": {
          "content": "\nLET answer() = VALOF\n{   RESULTIS 6 * 9\n}"
        },
        "hiker.test.b": {
          "content": "\nGET \"hiker.b\"\nGET \"libhdr\"\n\nLET assert.int.equal(expected,actual,message) BE\n{   IF expected ~= actual DO\n    {\n        LET brk = 2\n        writef(\"assert.int.equal FAILED: %s*N\", message)\n        writef(\"expected: %n*N\", expected)\n        writef(\"  actual: %n*N\", actual);\n        abort(brk)\n    }\n}\n\nLET life.the.universe.and.everything() BE\n{   assert.int.equal(42, answer(), \"answer() = 42\")\n}\n\nLET start() BE\n{   life.the.universe.and.everything()\n    writef(\"All tests passed\")\n}\n"
        }
      }
    },
    "Bash, bash_unit": {
      "display_name": "Bash, bash_unit",
      "filename_extension": [
        ".sh"
      ],
      "image_name": "cyberdojofoundation/bash_unit:c4906b6",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "bash_unit ./test_*.sh\n"
        },
        "hiker.sh": {
          "content": "#!/bin/bash\n\nanswer()\n{\n  echo $((6 * 9))\n}\n"
        },
        "test_hiker.sh": {
          "content": "#!/bin/bash\n\nsource ./hiker.sh\n\ntest_life_the_universe_and_everything()\n{\n  local expected=42\n  local actual=$(answer)\n  assert_equals ${expected} ${actual}\n}\n"
        },
        "unit_help.txt": {
          "content": "\nbash_unit help is online at\nhttps://github.com/pgrange/bash_unit\n\nSummary\n-------\ntest functions must start with test.\n\nassert_equals <expected> <actual> [message]\nassert_not_equals <unexpected> <actual> [message]\nassert_status_code <expected_status_code> <assertion> [message]\nassert_fail <assertion> [message]\nassert <assertion> [message]\nfail [message]\n\n\nsetup\n  called once before each test is run\nteardown\n  called once after each test is run\n"
        }
      }
    },
    "Bash, bats": {
      "display_name": "Bash, bats",
      "filename_extension": [
        ".sh"
      ],
      "image_name": "cyberdojofoundation/bash_bats:d566884",
      "tab_size": 4,
      "visible_files": {
        "bats_help.txt": {
          "content": "\nbats help is online at\nhttps://github.com/bats-core/bats-core#usage\n"
        },
        "cyber-dojo.sh": {
          "content": "chmod 700 *.sh\n./test_*.sh\n"
        },
        "hiker.sh": {
          "content": "#!/bin/bash\n\nanswer()\n{\n  echo $((6 * 9))\n}\n"
        },
        "test_hiker.sh": {
          "content": "#!/usr/bin/env bats\n\nsource ./hiker.sh\n\n@test \"life the universe and everything\" {\n  local actual=$(answer)\n  [ \"$actual\" == \"42\" ]\n}\n"
        }
      }
    },
    "Bash, shunit2": {
      "display_name": "Bash, shunit2",
      "filename_extension": [
        ".sh"
      ],
      "image_name": "cyberdojofoundation/bash_shunit2:31d4d63",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "export SHUNIT_COLOR=none\nchmod +x *.sh\n./test_*.sh\n"
        },
        "hiker.sh": {
          "content": "#!/bin/bash\n\nanswer()\n{\n  echo $((6 * 9))\n}\n"
        },
        "shunit2_help.txt": {
          "content": "\nshunit2\nhttps://github.com/kward/shunit2\n\nSummary\n-------\ntest functions must start with the word 'test'.\n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n"
        },
        "test_hiker.sh": {
          "content": "#!/bin/bash\n\nsource ./hiker.sh\n\ntest_life_the_universe_and_everything()\n{\n  local expected=42\n  local actual=$(answer)\n  assertEquals ${expected} ${actual}\n}\n\n# load and run shUnit2\nsource shunit2\n"
        }
      }
    },
    "C (clang), Cgreen": {
      "display_name": "C (clang), Cgreen",
      "filename_extension": [
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clang_cgreen:9a688ed",
      "max_seconds": 10,
      "progress_regexs": [
        "((\\d)+ tests)",
        "(\\d)+ failure[s]?, (\\d)+ exception[s]?"
      ],
      "tab_size": 4,
      "visible_files": {
        "Makefile": {
          "content": "KATA=hiker\n\nall: $(KATA)_tests.so\n\tcgreen-runner $^\n\n$(KATA)_tests.so: $(KATA)_tests.o $(KATA).o\n\t$(CC) -shared -o $@ $^ -lcgreen\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -fPIC -c -o $@ $^\n"
        },
        "cyber-dojo.sh": {
          "content": "LANG=C\nexport LD_LIBRARY_PATH=.:/usr/local/lib\nmake\n"
        },
        "hiker.c": {
          "content": "#include \"hiker.h\"\n\nint answer(void) {\n    return 6 * 9;\n}\n"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n"
        },
        "hiker_tests.c": {
          "content": "#include <cgreen/cgreen.h>\n\n#include \"hiker.h\"\n\nDescribe(hiker);\nBeforeEach(hiker) {}\nAfterEach(hiker) {}\n\nEnsure(hiker, answers_42) {\n    assert_that(answer(), is_equal_to(42));\n}\n"
        }
      }
    },
    "C (clang), assert": {
      "display_name": "C (clang), assert",
      "filename_extension": [
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clang_assert:2ab0e67",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "hiker.c": {
          "content": "#include \"hiker.h\"\r\n\r\nint answer(void)\r\n{\r\n    return 6 * 9;\r\n}\r\n"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n"
        },
        "hiker.tests.c": {
          "content": "#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n    assert(answer() == 42);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    puts(\"All tests passed\");\n}\n"
        },
        "makefile": {
          "content": "CFLAGS += -I.\nCFLAGS += -Wall\nCFLAGS += -Wextra\nCFLAGS += -x c\nCFLAGS += -std=c18\nCFLAGS += -Wshadow\nCFLAGS += -Wfloat-equal\nCFLAGS += -O\nCFLAGS += -Wsequence-point\nCFLAGS += -Wmissing-noreturn\nCFLAGS += -Wunreachable-code\nCFLAGS += -Wmissing-prototypes\nCFLAGS += -Wstrict-prototypes\n\nCFLAGS += -fprofile-arcs -ftest-coverage\n\nCFLAGS += -fsanitize=leak,address\nCFLAGS += -fno-sanitize-recover=undefined\nCFLAGS += -fno-omit-frame-pointer\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(C_FILES) $(COMPILED_H_FILES)\n\t@$(CC) $(CFLAGS) -O $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_h: %.h\n\t@$(CC) -x c++ $(CFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C (gcc), Cgreen": {
      "display_name": "C (gcc), Cgreen",
      "filename_extension": [
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gcc_cgreen:f1b0ca1",
      "max_seconds": 10,
      "progress_regexs": [
        "((\\d)+ tests)",
        "(\\d)+ failures[s]?, (\\d)+ exception[s]?"
      ],
      "tab_size": 4,
      "visible_files": {
        "Makefile": {
          "content": "KATA=hiker\n\nall: $(KATA)_tests.so\n\tcgreen-runner $^\n\n$(KATA)_tests.so: $(KATA)_tests.o $(KATA).o\n\t$(CC) -shared -o $@ $^ -lcgreen\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -fPIC -c -o $@ $^\n"
        },
        "cyber-dojo.sh": {
          "content": "LANG=C\nexport LD_LIBRARY_PATH=.:/usr/local/lib\nmake\n"
        },
        "hiker.c": {
          "content": "#include \"hiker.h\"\n\nint answer(void) {\n    return 6 * 9;\n}\n"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n"
        },
        "hiker_tests.c": {
          "content": "#include <cgreen/cgreen.h>\n#include \"hiker.h\"\n\nDescribe(hiker);\nBeforeEach(hiker) {}\nAfterEach(hiker) {}\n\nEnsure(hiker, answers_42) {\n    assert_that(answer(), is_equal_to(42));\n}\n"
        }
      }
    },
    "C (gcc), CppUTest": {
      "display_name": "C (gcc), CppUTest",
      "filename_extension": [
        ".c",
        ".h",
        ".cpp"
      ],
      "highlight_filenames": [
        "untitled.c",
        "untitled.h",
        "untitledTest.cpp"
      ],
      "image_name": "cyberdojofoundation/gcc_cpputest:95cf2bd",
      "max_seconds": 10,
      "progress_regexs": [
        "Errors (.* ms)",
        "OK (.* ms)"
      ],
      "tab_size": 4,
      "visible_files": {
        "AllTests.cpp": {
          "content": "#include \"CppUTest/CommandLineTestRunner.h\"\n\nint main(int ac, char** av)\n{\n    return RUN_ALL_TESTS(ac, av);\n}\n\n"
        },
        "cyber-dojo.sh": {
          "content": "\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text dirs/files we don't want returned.\n  cyber_dojo_delete_dirs objs/ # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nexport CPPUTEST_HOME=/cpputest\nmake\n"
        },
        "makefile": {
          "content": "#Set this to @ to keep the makefile quiet\r\nSILENCE = @\r\n\r\n#---- Outputs ----#\r\nCOMPONENT_NAME = untitled\r\n\r\n#--- Inputs ----#\r\nPROJECT_HOME_DIR = .\r\n\r\nSRC_FILES = untitled.c\r\n\r\nTEST_SRC_FILES = untitledTest.cpp AllTests.cpp\r\n\r\nINCLUDE_DIRS =\\\r\n\t.\\\r\n\t$(CPPUTEST_HOME)/include/ \\\r\n\t$(CPPUTEST_HOME)/include/Platforms/Gcc\\\r\n\r\nCPPUTEST_WARNINGFLAGS += -Wall\r\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\r\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\r\nCPPUTEST_CXXFLAGS +=  -std=c++2a\r\nCPPUTEST_CFLAGS += -std=c18\r\n\r\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\r\n"
        },
        "untitled.c": {
          "content": "#include \"untitled.h\"\n\nint the_answer_is(void)\n{\n    return 6 * 9;\n}\n"
        },
        "untitled.h": {
          "content": "#ifndef UNTITLED_INCLUDED\r\n#define UNTITLED_INCLUDED\r\n\r\nint the_answer_is(void);\r\n\r\n#endif\r\n\r\n"
        },
        "untitledTest.cpp": {
          "content": "#include \"CppUTest/TestHarness.h\"\r\n\r\nextern \"C\"\r\n{\r\n#include \"untitled.h\"\r\n}\r\n\r\nTEST_GROUP(TheGroupName)\r\n{\r\n    void setup()\r\n    {\r\n    }\r\n\r\n    void teardown()\r\n    {\r\n    }\r\n};\r\n\r\nTEST(TheGroupName, a_meaningful_test_name)\r\n{\r\n    // a simple example to start you off\r\n    LONGS_EQUAL(42, the_answer_is());\r\n    //CHECK(1);\r\n    //CHECK_TRUE(1);\r\n    //CHECK_FALSE(0);\r\n    //STRCMP_EQUAL(\"hey\", \"hey\");\r\n    //FAIL(\"Start here\");\r\n}\r\n"
        }
      }
    },
    "C (gcc), GoogleTest": {
      "display_name": "C (gcc), GoogleTest",
      "filename_extension": [
        ".c",
        ".h",
        ".cpp",
        ".hpp"
      ],
      "image_name": "cyberdojofoundation/gcc_googletest:4ef2b73",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.c": {
          "content": "#include \"hiker.h\"\n\nint answer()\n{\n    return 6 * 9;\n}\n"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include <gtest/gtest.h>\n\nextern \"C\"\n{\n#include \"hiker.h\"\n}\n\nusing namespace ::testing;\n\nTEST(Hiker, Life_the_universe_and_everything)\n{\n    ASSERT_EQ(42, answer());\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCFLAGS += -I.\nCFLAGS += -std=c18\nCFLAGS += -Wall -Wextra -Werror\nCFLAGS += -fprofile-arcs -ftest-coverage\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\nCOMPILED_CPP_FILES = $(patsubst %.cpp,%.o,$(CPP_FILES))\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\nCOMPILED_C_FILES = $(patsubst %.c,%.o,$(C_FILES))\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: $(COMPILED_CPP_FILES) $(COMPILED_C_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(COMPILED_CPP_FILES) $(COMPILED_C_FILES) $(GTEST_LIBS) -o $@\n\n%.o: %.cpp\n\t@$(CXX) -c $(CXXFLAGS) -O $< -o $@\n\n%.o: %.c\n\t@$(CC) -c $(CFLAGS) -O $< -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n\n%.compiled_h: %.h\n\t@$(C) -x c $(CFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C (gcc), assert": {
      "display_name": "C (gcc), assert",
      "filename_extension": [
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gcc_assert:ed4d5d5",
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.c": {
          "content": "#include \"hiker.h\"\r\n\r\nint answer(void)\r\n{\r\n    return 6 * 9;\r\n}\r\n"
        },
        "hiker.h": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n"
        },
        "hiker.tests.c": {
          "content": "#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n    assert(answer() == 42);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    puts(\"All tests passed\");\n}\n"
        },
        "makefile": {
          "content": "CFLAGS += -I.\nCFLAGS += -std=c18\nCFLAGS += -Wall\nCFLAGS += -Wextra\nCFLAGS += -Wsequence-point\nCFLAGS += -Wstrict-prototypes\nCFLAGS += -Wmissing-prototypes\nCFLAGS += -Wshadow\nCFLAGS += -Wfloat-equal\nCFLAGS += -O\nCFLAGS += -fprofile-arcs -ftest-coverage\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C#, Moq": {
      "display_name": "C#, Moq",
      "filename_extension": [
        ".cs"
      ],
      "image_name": "cyberdojofoundation/csharp_moq:368990c",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "HikerTest.cs": {
          "content": "using Moq;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class HikerTest\n{\n    [Test]\n    public void life_the_universe_and_everything()\n    {\n        var arthur = new Mock<IHiker>();\n        arthur.Setup((foo => foo.Answer())).Returns(6 * 9);\n\n        // a simple example to start you off\n        Assert.AreEqual(42, arthur.Object.Answer());\n    }\n}\n"
        },
        "IHiker.cs": {
          "content": "\npublic interface IHiker\n{\n    int Answer();\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\ntrap tidy_up EXIT\nfunction tidy_up()\n{\n  # cyber-dojo returns text files under /sandbox that are\n  # created/deleted/changed. In here you can remove any\n  # such files you don't want returned to the browser.\n  [ ! -f TestResult.xml ] || rm TestResult.xml\n}\n\nMOQ_PATH=/moq/Moq.4.7.99/lib/net45\nCASTLE_PATH=/moq/Castle.Core.4.1.1/lib/net45\nNUNIT_PATH=/moq/lib/net45\n\nexport MONO_PATH=${MOQ_PATH}:${CASTLE_PATH}:${NUNIT_PATH}\n\nmcs -t:library \\\n  -r:${MOQ_PATH}/Moq.dll \\\n  -r:${CASTLE_PATH}/Castle.Core.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/moq/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n"
        }
      }
    },
    "C#, NUnit": {
      "display_name": "C#, NUnit",
      "filename_extension": [
        ".cs"
      ],
      "image_name": "cyberdojofoundation/csharp_nunit:1452bb7",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.cs": {
          "content": "public class Hiker\n{\n    public static int Answer()\n    {\n        return 6 * 9;\n    }\n}\n"
        },
        "HikerTest.cs": {
          "content": "using NUnit.Framework;\n\n[TestFixture]\npublic class HikerTest\n{\n    [Test]\n    public void life_the_universe_and_everything()\n    {\n        // a simple example to start you off\n        Assert.AreEqual(42, Hiker.Answer());\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\ntrap tidy_up EXIT\nfunction tidy_up()\n{\n  # cyber-dojo returns text files under /sandbox that are\n  # created/deleted/changed. In here you can remove any\n  # such files you don't want returned to the browser.\n  [ ! -f TestResult.xml ] || rm TestResult.xml\n}\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\nmcs -t:library \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n"
        }
      }
    },
    "C#, SpecFlow": {
      "display_name": "C#, SpecFlow",
      "filename_extension": [
        ".cs",
        ".feature"
      ],
      "image_name": "cyberdojofoundation/csharp_specflow:b1b68a6",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.cs": {
          "content": "\npublic class Hiker\n{\n    public static int Answer()\n    {\n        return 6 * 9;\n    }\n}\n"
        },
        "HikerSpec.feature": {
          "content": "Feature: A simple specification to start you off\n\n  Scenario: The meaning of life, the universe and everything\n    Given life, the universe and everything\n    When I ask for the meaning\n    Then the answer is 42"
        },
        "HikerSteps.cs": {
          "content": "using System;\nusing TechTalk.SpecFlow;\nusing NUnit.Framework;\n\n[Binding]\npublic class HikerSteps\n{\n    private int answer;\n\n    [Given(@\"life, the universe and everything\")]\n    public void GivenLifeTheUniverseAndEverything()\n    {\n        // Life, the universe and everything needs no creation by us\n    }\n\n    [When(@\"I ask for the meaning\")]\n    public void WhenIAskForTheMeaning()\n    {\n        answer = Hiker.Answer();\n    }\n\n    [Then(@\"the answer is (.*)\")]\n    public void ThenTheAnswerIs(int expected)\n    {\n        Assert.AreEqual(expected, answer);\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "#!/bin/bash\n\n# ------------------------------------------------------------------------\n# cyber-dojo returns text files under /sandbox that are\n# created/deleted/changed. In tidy_up you can remove any\n# such files you don't want returned to the browser.\n\ntrap tidy_up EXIT\n\nfunction tidy_up()\n{\n  delete_files TestResult.xml\n  delete_files TechTalk.SpecFlow.targets\n  delete_files TechTalk.SpecFlow.tasks\n  delete_files TechTalk.SpecFlow.props\n  delete_files specflow.json\n  delete_files specflow.exe.config\n  delete_files plugincompability.config\n  delete_files app.config\n  delete_files RunTests.csproj\n  delete_files *.feature.cs\n}\n\nfunction delete_files()\n{\n  for filename in \"$@\"\n  do\n      rm \"${filename}\" 2> /dev/null || true\n  done\n}\n\n# ------------------------------------------------------------------------\n# build project file\n{\n  cat <<PREFIX\n  <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <ItemGroup>\nPREFIX\n  for file in *.feature\n  do\n    cat <<EACH_FILE\n        <None Include=\"${file}\">\n          <Generator>SpecFlowSingleFileGenerator</Generator>\n          <LastGenOutput>${file}.cs</LastGenOutput>\n        </None>\nEACH_FILE\n  done\n  cat <<SUFFIX\n    </ItemGroup>\n    <ItemGroup>\n      <None Include=\"specflow.json\" />\n    </ItemGroup>\n  </Project>\nSUFFIX\n} > RunTests.csproj\n\n# build specflow.json\ncat <<EOF > specflow.json\n{\n  \"specflow\": {\n    \"runtime\": {\"missingOrPendingStepsOutcome\": \"Error\"},\n    \"unitTestProvider\": {\"name\": \"NUnit\"}\n  }\n}\nEOF\n\nNUNIT_PATH=/nunit/lib/net45\nexport MONO_PATH=${NUNIT_PATH}\n\n# ------------------------------------------------------------------------\n# generate 'code behind' and run\n\nfind . -iname '*.feature.cs' -exec rm '{}' \\;\nmono /specflow/specflow.exe generateall RunTests.csproj\n\nmcs -t:library \\\n  -r:/specflow/TechTalk.SpecFlow.dll \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -out:RunTests.dll *.cs\n\ncp /specflow/* .\n\nif [ $? -eq 0 ]; then\n  NUNIT_RUNNERS_PATH=/nunit/tools\n  mono ${NUNIT_RUNNERS_PATH}/nunit3-console.exe --noheader ./RunTests.dll\nfi\n"
        }
      }
    },
    "C++ (clang++), Catch": {
      "display_name": "C++ (clang++), Catch",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_catch:d2aa9c1",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "// For more on how to use the excellent Catch test framework see\n// https://github.com/catchorg/Catch2\n\n#include \"hiker.hpp\"\n#include <catch2/catch.hpp>\n\nTEST_CASE(\"global function example\")\n{\n    REQUIRE( answer() == 42 );\n}\n\nTEST_CASE(\"instance method example\")\n{\n    REQUIRE( hiker().answer() == 42 );\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall\nCXXFLAGS += -Wextra\nCXXFLAGS += -Wshadow\nCXXFLAGS += -Wfloat-equal\nCXXFLAGS += -O\nCXXFLAGS += -Wsequence-point\nCXXFLAGS += -Wmissing-noreturn\nCXXFLAGS += -Wunreachable-code\n\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCXXFLAGS += -fsanitize=leak,address\nCXXFLAGS += -fno-sanitize-recover=undefined\nCXXFLAGS += -fno-omit-frame-pointer\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\nOBJ_FILES = $(patsubst %.cpp,%.o,$(CPP_FILES)) /usr/lib/catch_main.o\n\n%.o: %.cpp\n\t@$(CXX) -c -o $@ $< $(CXXFLAGS)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(OBJ_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(OBJ_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (clang++), Cgreen": {
      "display_name": "C++ (clang++), Cgreen",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_cgreen:869637a",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.cpp": {
          "content": "#include \"Hiker.hpp\"\n\nint Hiker::answer() const {\n        return 6 * 9;\n}\n"
        },
        "Hiker.hpp": {
          "content": "#ifndef HIKER_HPP\n#define HIKER_HPP\n\nclass Hiker {\npublic:\n    int answer() const;\n};\n\n#endif\n\n"
        },
        "HikerTests.cpp": {
          "content": "#include <cgreen/cgreen.h>\n\n#include \"Hiker.hpp\"\n\nusing namespace cgreen;\n\nDescribe(Hiker);\nBeforeEach(Hiker) {}\nAfterEach(Hiker) {}\n\nEnsure(Hiker, answers_42) {\n    Hiker hiker;\n    assert_that(hiker.answer(), is_equal_to(42));\n}\n"
        },
        "Makefile": {
          "content": "KATA=Hiker\n\nCFLAGS=-I/usr/local/include\n\nall: $(KATA)Tests.so\n\tcgreen-runner $^\n\n$(KATA)Tests.so: $(KATA)Tests.o $(KATA).o\n\t$(CXX) -shared -o $@ $^ -lcgreen\n\n%.o: %.cpp\n\t$(CXX) $(CFLAGS) -fPIC -c -o $@ $^\n"
        },
        "cyber-dojo.sh": {
          "content": "LANG=C\nexport LD_LIBRARY_PATH=.:/usr/local/lib\nmake\n"
        }
      }
    },
    "C++ (clang++), GoogleMock": {
      "display_name": "C++ (clang++), GoogleMock",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_googlemock:ba099d5",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "disk_logger.cpp": {
          "content": "#include \"disk_logger.hpp\"\n#include <fstream>\n\nDiskLogger & DiskLogger::getInstance()\n{\n    static DiskLogger instance;\n    return instance;\n}\n\nvoid DiskLogger::log(const std::string & info)\n{\n    std::ofstream ofs(\"singleton-logger.txt\", std::ios_base::app);\n    ofs << info << std::endl;\n}\n\nDiskLogger::DiskLogger()\n{\n}"
        },
        "disk_logger.hpp": {
          "content": "#ifndef DISK_LOGGER_INCLUDED\n#define DISK_LOGGER_INCLUDED\n\n#include \"logger.hpp\"\n\nclass DiskLogger : public Logger\n{\npublic:\n    static DiskLogger & getInstance();\n    virtual void log(const std::string &);\nprivate:\n    DiskLogger();\n};\n\n#endif"
        },
        "hiker.cpp": {
          "content": "#include \"hiker.hpp\"\n#include \"disk_logger.hpp\"\n\nHiker::Hiker()\n    : logger(DiskLogger::getInstance())\n{\n}\n\n\nHiker::Hiker(Logger & logger_)\n    : logger(logger_)\n{\n}\n\nint Hiker::answer()\n{\n    logger.log(\"Hiker::answer()\");\n    return 6 * 9;\n}\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nclass Logger;\n\nclass Hiker\n{\npublic:\n    Hiker();\n    explicit Hiker(Logger &);\n    int answer();\nprivate:\n    Logger & logger;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include \"mock_logger.hpp\"\n#include <gmock/gmock.h>\n\nusing namespace ::testing;\n\nnamespace {\n\nTEST(Hiker, Life_the_universe_and_everything)\n{\n    MockLogger logger;\n    EXPECT_CALL(logger, log(\"Hiker::answer()\")).Times(Exactly(1));\n    Hiker arthur(logger);\n    ASSERT_THAT(arthur.answer(), Eq(42));\n}\n\n}\n"
        },
        "logger.hpp": {
          "content": "#ifndef LOGGER_INCLUDED\n#define LOGGER_INCLUDED\n\n#include <string>\n\nclass Logger // interface\n{\npublic:\n    virtual void log(const std::string &) = 0;\n};\n\n#endif"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall\nCXXFLAGS += -Wextra\nCXXFLAGS += -Wshadow\nCXXFLAGS += -Wfloat-equal\nCXXFLAGS += -O\nCXXFLAGS += -Wsequence-point\nCXXFLAGS += -Wmissing-noreturn\nCXXFLAGS += -Wunreachable-code\n\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCXXFLAGS += -fsanitize=leak,address\nCXXFLAGS += -fno-sanitize-recover=undefined\nCXXFLAGS += -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgmock -lgmock_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        },
        "mock_logger.hpp": {
          "content": "#ifndef MOCK_LOGGER_INCLUDED\n#define MOCK_LOGGER_INCLUDED\n\n#include \"logger.hpp\"\n#include <gmock/gmock.h>\n\nclass MockLogger : public Logger\n{\npublic:\n    MOCK_METHOD1(log, void(const std::string&));\n};\n\n#endif\n"
        }
      }
    },
    "C++ (clang++), GoogleTest": {
      "display_name": "C++ (clang++), GoogleTest",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_googletest:1d77d5a",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(Hiker, global_function)\n{\n    ASSERT_EQ(42, answer());\n}\n\nTEST(Hiker, instance_method)\n{\n    ASSERT_EQ(42, hiker().answer());\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall\nCXXFLAGS += -Wextra\nCXXFLAGS += -Wshadow\nCXXFLAGS += -Wfloat-equal\nCXXFLAGS += -O\nCXXFLAGS += -Wsequence-point\nCXXFLAGS += -Wmissing-noreturn\nCXXFLAGS += -Wunreachable-code\n\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCXXFLAGS += -fsanitize=leak,address\nCXXFLAGS += -fno-sanitize-recover=undefined\nCXXFLAGS += -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (clang++), Igloo": {
      "display_name": "C++ (clang++), Igloo",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_igloo:a97f795",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <igloo/igloo.h>\n\nusing namespace igloo;\n\nContext(Hiker)\n{\n  Spec(global_function_example)\n  {\n    Assert::That(answer(), Equals(42));\n  }\n  Spec(instance_method_example)\n  {\n    Assert::That(hiker().answer(), Equals(42));\n  }\n};\n"
        },
        "main.cpp": {
          "content": "#include <igloo/igloo_alt.h>\n\nusing namespace igloo;\n\nint main(int argc, const char *argv[])\n{\n  return TestRunner::RunAllTests(argc, argv);\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall\nCXXFLAGS += -Wextra\nCXXFLAGS += -Wshadow\nCXXFLAGS += -Wfloat-equal\nCXXFLAGS += -O\nCXXFLAGS += -Wsequence-point\nCXXFLAGS += -Wmissing-noreturn\nCXXFLAGS += -Wunreachable-code\n\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCXXFLAGS += -fsanitize=leak,address\nCXXFLAGS += -fno-sanitize-recover=undefined\nCXXFLAGS += -fno-omit-frame-pointer\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (clang++), assert": {
      "display_name": "C++ (clang++), assert",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/clangpp_assert:02b9551",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --gcov-executable 'llvm-cov gcov' --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <cassert>\n#include <iostream>\n\nnamespace\n{\n    void test_global_function()\n    {\n        assert(answer() == 42);\n    }\n\n    void test_instance_method()\n    {\n        assert(hiker().answer() == 42);\n    }\n}\n\nint main()\n{\n    test_global_function();\n    test_instance_method();\n    std::cout << \"All tests passed\\n\";\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall\nCXXFLAGS += -Wextra\nCXXFLAGS += -Wshadow\nCXXFLAGS += -Wfloat-equal\nCXXFLAGS += -O\nCXXFLAGS += -Wsequence-point\nCXXFLAGS += -Wmissing-noreturn\nCXXFLAGS += -Wunreachable-code\n\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nCXXFLAGS += -fsanitize=leak,address\nCXXFLAGS += -fno-sanitize-recover=undefined\nCXXFLAGS += -fno-omit-frame-pointer\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), Boost.Test": {
      "display_name": "C++ (g++), Boost.Test",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_boosttest:f38a458",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#define BOOST_TEST_MODULE HikerTest\n#include <boost/test/unit_test.hpp>\n\nBOOST_AUTO_TEST_CASE(global_function_example)\n{\n    BOOST_REQUIRE_EQUAL(42, answer());\n}\n\nBOOST_AUTO_TEST_CASE(instance_method_example)\n{\n    BOOST_REQUIRE_EQUAL(42, hiker().answer());\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -DBOOST_TEST_DYN_LINK\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nBOOST_LIB = -lboost_unit_test_framework\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(BOOST_LIB) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), Catch": {
      "display_name": "C++ (g++), Catch",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_catch:0c5ba0d",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "// For more on how to use the excellent Catch test framework see\n// https://github.com/catchorg/Catch2\n\n#include \"hiker.hpp\"\n#include <catch2/catch.hpp>\n\nTEST_CASE(\"global function example\")\n{\n    REQUIRE( answer() == 42 );\n}\n\nTEST_CASE(\"instance method example\")\n{\n    REQUIRE( hiker().answer() == 42 );\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a \nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\nOBJ_FILES = $(patsubst %.cpp,%.o,$(CPP_FILES)) /usr/lib/catch_main.o\n\n%.o: %.cpp\n\t@$(CXX) -c -o $@ $< $(CXXFLAGS)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(OBJ_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(OBJ_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), Cgreen": {
      "display_name": "C++ (g++), Cgreen",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_cgreen:431d077",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.cpp": {
          "content": "#include \"Hiker.hpp\"\n\nint Hiker::answer() const {\n        return 6 * 9;\n}\n"
        },
        "Hiker.hpp": {
          "content": "#ifndef HIKER_HPP\n#define HIKER_HPP\n\nclass Hiker {\npublic:\n    int answer() const;\n};\n\n#endif\n\n"
        },
        "HikerTests.cpp": {
          "content": "#include <cgreen/cgreen.h>\n\n#include \"Hiker.hpp\"\n\nusing namespace cgreen;\n\nDescribe(Hiker);\nBeforeEach(Hiker) {}\nAfterEach(Hiker) {}\n\nEnsure(Hiker, answers_42) {\n    Hiker hiker;\n    assert_that(hiker.answer(), is_equal_to(42));\n}\n"
        },
        "Makefile": {
          "content": "\nKATA=Hiker\n\nCFLAGS=-I/usr/local/include\n\nall: $(KATA)Tests.so\n\tcgreen-runner $^\n\n$(KATA)Tests.so: $(KATA)Tests.o $(KATA).o\n\t$(CXX) -shared -o $@ $^ -lcgreen\n\n%.o: %.cpp\n\t$(CXX) $(CFLAGS) -fPIC -c -o $@ $^\n"
        },
        "cyber-dojo.sh": {
          "content": "LANG=C\nexport LD_LIBRARY_PATH=.:/usr/local/lib\nmake\n"
        }
      }
    },
    "C++ (g++), CppUTest": {
      "display_name": "C++ (g++), CppUTest",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_cpputest:2bcb629",
      "max_seconds": 10,
      "progress_regexs": [
        "Errors \\((\\d)+ failures, (\\d)+ tests, (\\d)+ ran, (\\d)+ checks, (\\d)+ ignored, (\\d)+ filtered out, (\\d)+ ms\\)",
        "OK \\((\\d)+ tests, (\\d)+ ran, (\\d)+ checks, (\\d)+ ignored, (\\d)+ filtered out, (\\d)+ ms\\)"
      ],
      "tab_size": 4,
      "visible_files": {
        "Hiker.cpp": {
          "content": "#include \"Hiker.hpp\"\n\nHiker::Hiker()\n{\n}\n\nHiker::~Hiker()\n{\n}\n\nint Hiker::answer() const\n{\n    return 6 * 9;\n}"
        },
        "Hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nclass Hiker\n{\npublic:\n  explicit Hiker();\n  ~Hiker();\n\n  int answer() const;\n\n  Hiker(const Hiker &) = delete;\n  Hiker & operator=(const Hiker &) = delete;\n};\n\n#endif\n"
        },
        "cyber-dojo.sh": {
          "content": "\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text dirs/files we don't want returned.\n  cyber_dojo_delete_dirs objs/ # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nexport CPPUTEST_HOME=/cpputest\nmake\n"
        },
        "makefile": {
          "content": "#Set this to @ to keep the makefile quiet\nSILENCE = @\n\nLD_LIBRARIES = -L$(CPPUTEST_HOME)/lib -lCppUTest -lCppUTestExt\n\n#---- Outputs ----#\nCOMPONENT_NAME = Hiker\n\nSRC_DIRS = \\\n  .\n\nTEST_SRC_DIRS = \\\n  tests\n\nINCLUDE_DIRS =\\\n\t.\\\n\t$(CPPUTEST_HOME)/include/ \\\n\nCXXFLAGS += -Wall -Wswitch-default -Wfatal-errors\nCXXFLAGS += -std=c++2a\nCFLAGS += -std=c18\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n"
        },
        "tests/AllTests.cpp": {
          "content": "#include \"CppUTest/CommandLineTestRunner.h\"\n\nint main(int ac, char** av)\n{\n    return RUN_ALL_TESTS(ac, av);\n}\n"
        },
        "tests/HikerTest.cpp": {
          "content": "#include \"Hiker.hpp\"\n#include \"CppUTest/TestHarness.h\"\n\nTEST_GROUP(Hiker)\n{\n    Hiker * hhg;\n\n    void setup()\n    {\n        hhg = new Hiker();\n    }\n    void teardown()\n    {\n        delete hhg;\n    }\n};\n\nTEST(Hiker, Life_the_universe_and_everything)\n{\n    // a simple example to start you off\n    LONGS_EQUAL(42, hhg->answer());\n    //CHECK(1);\n    //CHECK_TRUE(1);\n    //CHECK_FALSE(0);\n    //STRCMP_EQUAL(\"hey\", \"hey\");\n    //FAIL(\"Start here\");\n}\n"
        }
      }
    },
    "C++ (g++), Cucumber-cpp": {
      "display_name": "C++ (g++), Cucumber-cpp",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".feature",
        ".c",
        ".h"
      ],
      "highlight_filenames": [
        "features/hiker.feature",
        "features/step_definitions/hiker_steps.cpp",
        "hiker.hpp",
        "hiker.cpp"
      ],
      "image_name": "cyberdojofoundation/gpp_cucumber_gtest:4c7f578",
      "max_seconds": 20,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "LANG=c\nif  make --always-make 2>&1 ; then\n  # Test output can be formatted as progress or documentation\n  sleep 1\n  cucumber -f progress . -r .\nfi\n"
        },
        "features/hiker.feature": {
          "content": "Feature: hitch-hiker playing scrabble\n\nScenario: earthling playing scrabble in the past\n  Given the hitch-hiker selects some tiles\n  When they spell 6 times 9\n  Then the score is 42\n"
        },
        "features/step_definitions/cucumber.wire": {
          "content": "host: localhost\nport: 3902\n"
        },
        "features/step_definitions/hiker_steps.cpp": {
          "content": "#include <gtest/gtest.h>\n#include <cucumber-cpp/autodetect.hpp>\n#include \"hiker.hpp\"\n\nnamespace\n{\n\nusing cucumber::ScenarioScope;\n\nstruct HikerCtx\n{\n    size_t result = 0;\n};\n\nGIVEN(\"^the hitch-hiker selects some tiles$\")\n{\n}\n\nWHEN(\"^they spell (\\\\d+) times (\\\\d+)\")\n{\n    REGEX_PARAM(size_t, multiplier);\n    REGEX_PARAM(size_t, multiplicand);\n    ScenarioScope<HikerCtx> context{};\n    context->result = answer(multiplier, multiplicand);\n}\n\nTHEN(\"^the score is (\\\\d+)$\")\n{\n    REGEX_PARAM(size_t, result);\n    ScenarioScope<HikerCtx> context{};\n    ASSERT_EQ(result, context->result);\n}\n\n\n}//namespace\n"
        },
        "hiker.cpp": {
          "content": "#include \"hiker.hpp\"\n\nint answer(int a, int b)\n{\n    return a * b;\n}\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(int a, int b);\n\n#endif\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nGTEST_LIBS = -lgtest -pthread\nBOOST_LIBS = -lboost_thread -lboost_system -lboost_regex -lboost_date_time -lboost_program_options -lboost_filesystem\nCUCUMBER_LIB = -lcucumber-cpp\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\nCPP_STEP_FILES = $(wildcard features/step_definitions/*.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< > /dev/null &\n\ntest: $(CPP_FILES) $(CPP_STEP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(CPP_STEP_FILES) $(GTEST_LIBS) $(BOOST_LIBS) $(CUCUMBER_LIB) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), GoogleMock": {
      "display_name": "C++ (g++), GoogleMock",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_googlemock:129f26f",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "disk_logger.cpp": {
          "content": "#include \"disk_logger.hpp\"\n#include <fstream>\n\nDiskLogger & DiskLogger::getInstance()\n{\n    static DiskLogger instance;\n    return instance;\n}\n\nvoid DiskLogger::log(const std::string & info)\n{\n    std::ofstream ofs(\"singleton-logger.txt\", std::ios_base::app);\n    ofs << info << std::endl;\n}\n\nDiskLogger::DiskLogger()\n{\n}"
        },
        "disk_logger.hpp": {
          "content": "#ifndef DISK_LOGGER_INCLUDED\n#define DISK_LOGGER_INCLUDED\n\n#include \"logger.hpp\"\n\nclass DiskLogger : public Logger\n{\npublic:\n    static DiskLogger & getInstance();\n    virtual void log(const std::string &);\nprivate:\n    DiskLogger();\n};\n\n#endif"
        },
        "hiker.cpp": {
          "content": "#include \"hiker.hpp\"\n#include \"disk_logger.hpp\"\n\nHiker::Hiker()\n    : logger(DiskLogger::getInstance())\n{\n}\n\n\nHiker::Hiker(Logger & logger)\n    : logger(logger)\n{\n}\n\nint Hiker::answer()\n{\n    logger.log(\"Hiker::answer()\");\n    return 6 * 9;\n}\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nclass Logger;\n\nclass Hiker\n{\npublic:\n    Hiker();\n    explicit Hiker(Logger &);\n    int answer();\nprivate:\n    Logger & logger;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include \"mock_logger.hpp\"\n#include <gmock/gmock.h>\n\nusing namespace ::testing;\n\nnamespace {\n\nTEST(Hiker, Life_the_universe_and_everything)\n{\n    MockLogger logger;\n    EXPECT_CALL(logger, log(\"Hiker::answer()\")).Times(Exactly(1));\n    Hiker arthur(logger);\n    ASSERT_THAT(arthur.answer(), Eq(42));\n}\n\n}"
        },
        "logger.hpp": {
          "content": "#ifndef LOGGER_INCLUDED\n#define LOGGER_INCLUDED\n\n#include <string>\n\nclass Logger // interface\n{\npublic:\n    virtual void log(const std::string &) = 0;\n};\n\n#endif"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wpedantic -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nGTEST_LIBS = -lgtest -lgmock -lgmock_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        },
        "mock_logger.hpp": {
          "content": "#ifndef MOCK_LOGGER_INCLUDED\n#define MOCK_LOGGER_INCLUDED\n\n#include \"logger.hpp\"\n#include <gmock/gmock.h>\n\nclass MockLogger : public Logger\n{\npublic:\n    MOCK_METHOD1(log, void(const std::string&));\n};\n\n#endif\n"
        }
      }
    },
    "C++ (g++), GoogleTest": {
      "display_name": "C++ (g++), GoogleTest",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_googletest:5b147ee",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(Hiker, global_function)\n{\n    ASSERT_EQ(42, answer());\n}\n\nTEST(Hiker, instance_method)\n{\n    ASSERT_EQ(42, hiker().answer());\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), Igloo": {
      "display_name": "C++ (g++), Igloo",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_igloo:bada23b",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <igloo/igloo.h>\n\nusing namespace igloo;\n\nContext(Hiker)\n{\n    Spec(global_function_example)\n    {\n        Assert::That(answer(), Equals(42));\n    }\n    Spec(instance_method_example)\n    {\n        Assert::That(hiker().answer(), Equals(42));\n    }\n};\n"
        },
        "main.cpp": {
          "content": "#include <igloo/igloo_alt.h>\n\nusing namespace igloo;\n\nint main(int argc, const char *argv[])\n{\n  return TestRunner::RunAllTests(argc, argv);\n}"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra -pthread\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "C++ (g++), assert": {
      "display_name": "C++ (g++), assert",
      "filename_extension": [
        ".cpp",
        ".hpp",
        ".c",
        ".h"
      ],
      "image_name": "cyberdojofoundation/gpp_assert:08f19a9",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  : # 2. Remove text files we don't want returned.\n  #cyber_dojo_delete_dirs ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\nmake\ngcovr --root . > report/coverage.txt\n"
        },
        "hiker.cpp": {
          "content": "// The starting files are unrelated to the exercise.\r\n//\r\n// They simply show syntax for writing and testing\r\n//  o) a global function\r\n//  o) an instance method\r\n// Pick the style that best fits the exercise.\r\n// Then delete the other one, along with this comment!\r\n\r\n#include \"hiker.hpp\"\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n\r\nint hiker::answer() const\r\n{\r\n    return ::answer();\r\n}\r\n"
        },
        "hiker.hpp": {
          "content": "#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer();\n\nclass hiker\n{\npublic:\n    int answer() const;\n};\n\n#endif\n"
        },
        "hiker.tests.cpp": {
          "content": "#include \"hiker.hpp\"\n#include <cassert>\n#include <iostream>\n\nnamespace\n{\n    void test_global_function()\n    {\n        assert(answer() == 42);\n    }\n\n    void test_instance_method()\n    {\n        assert(hiker().answer() == 42);\n    }\n}\n\nint main()\n{\n    test_global_function();\n    test_instance_method();\n    std::cout << \"All tests passed\\n\";\n}\n"
        },
        "makefile": {
          "content": "CXXFLAGS += -I.\nCXXFLAGS += -std=c++2a\nCXXFLAGS += -Wall -Wextra\nCXXFLAGS += -fprofile-arcs -ftest-coverage\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<\n"
        }
      }
    },
    "Chapel, assert": {
      "display_name": "Chapel, assert",
      "filename_extension": [
        ".chpl"
      ],
      "image_name": "cyberdojofoundation/chapel_assert:10efc4b",
      "max_seconds": 20,
      "tab_size": 2,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "chpl -o run_tests *.chpl && ./run_tests\n"
        },
        "hiker.chpl": {
          "content": "\nproc answer() {\n  return 6 * 9;\n}\n"
        },
        "hikerTest.chpl": {
          "content": "use hiker;\n\nproc lifeTheUniverseAndEverything() {\n  assert(answer() == 42);\n}\n\nproc greenTrafficLightPattern() {\n  return \"All tests passed\";\n}\n\nproc main() {\n  lifeTheUniverseAndEverything();\n  writeln(greenTrafficLightPattern());\n}\n"
        }
      }
    },
    "Clojure, Midje": {
      "display_name": "Clojure, Midje",
      "filename_extension": [
        ".clj"
      ],
      "image_name": "cyberdojofoundation/clojure_midje:06ae634",
      "max_seconds": 20,
      "tab_size": 2,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "# ------------------------------------------------------------------------\n# cyber-dojo returns text files under /sandbox that are\n# created/deleted/changed. In tidy_up you can remove any\n# such files you don't want returned to the browser.\n\ntrap tidy_up EXIT\n\nfunction tidy_up()\n{\n  delete_dirs target\n}\n\nfunction delete_dirs()\n{\n  for dirname in \"$@\"\n  do\n      rm -rf \"${dirname}\" 2> /dev/null || true\n  done\n}\n\nfunction delete_files()\n{\n  for filename in \"$@\"\n  do\n      rm \"${filename}\" 2> /dev/null || true\n  done\n}\n\n# ------------------------------------------------------------------------\nln -sf /.lein ~/\nln -sf /.m2 ~/\nlein midje\n"
        },
        "hiker.clj": {
          "content": "(ns hiker)\n\n(defn answer []\n    (* 6 9))\n"
        },
        "hiker_test.clj": {
          "content": "(ns hiker-test\n  (:require [midje.sweet :refer :all]\n            [hiker :refer :all]))\n\n(facts \"about life, the universe, and everything\"\n  (answer) => 42)\n"
        },
        "project.clj": {
          "content": "(defproject hiker \"1.0.0\"\n  :description \"Run midje tests inside cyber-dojo\"\n  :dependencies [[org.clojure/clojure \"1.8.0\"]\n                 [midje \"1.8.3\"]]\n  :source-paths [\".\"]\n  :plugins      [[lein-midje \"3.2\"]])\n"
        }
      }
    },
    "Clojure, clojure.test": {
      "display_name": "Clojure, clojure.test",
      "filename_extension": [
        ".clj"
      ],
      "image_name": "cyberdojofoundation/clojure_test:0bcbdd6",
      "max_seconds": 20,
      "tab_size": 2,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "# ------------------------------------------------------------------------\n# cyber-dojo returns text files under /sandbox that are\n# created/deleted/changed. In tidy_up you can remove any\n# such files you don't want returned to the browser.\n\ntrap tidy_up EXIT\n\nfunction tidy_up()\n{\n  delete_dirs target\n}\n\nfunction delete_dirs()\n{\n  for dirname in \"$@\"\n  do\n      rm -rf \"${dirname}\" 2> /dev/null || true\n  done\n}\n\nfunction delete_files()\n{\n  for filename in \"$@\"\n  do\n      rm \"${filename}\" 2> /dev/null || true\n  done\n}\n\n# ------------------------------------------------------------------------\nln -sf /.lein ~/\nln -sf /.m2 ~/\nlein test *_test.clj\n"
        },
        "hiker.clj": {
          "content": "(ns hiker)\n\n(defn answer []\n    (* 6 9))\n"
        },
        "hiker_test.clj": {
          "content": "(ns hiker-test\n  (:require [clojure.test :refer :all]\n            [hiker :refer :all]))\n\n(deftest life-the-universe-and-everything\n  (is (= 42 (answer))))\n"
        },
        "project.clj": {
          "content": "(defproject hiker \"0.0.1-SNAPSHOT\"\n  :description \"Run clojure.test tests inside cyber-dojo\"\n  :dependencies [[org.clojure/clojure \"1.8.0\"]]\n  :source-paths [\".\"])\n"
        }
      }
    },
    "CoffeeScript, jasmine": {
      "display_name": "CoffeeScript, jasmine",
      "filename_extension": [
        ".coffee"
      ],
      "image_name": "cyberdojofoundation/coffeescript_jasmine:61aae85",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "jasmine-node --coffee --noColor .\n"
        },
        "hiker.coffee": {
          "content": "class exports.Hiker\n\n  answer: () ->\n    6 * 9\n"
        },
        "hiker_spec.coffee": {
          "content": "imports = require './hiker'\n\ndescribe 'jasmine-node', ->\n\n  it 'life the universe and everything', ->\n    douglas = new imports.Hiker()\n    expect(douglas.answer()).toEqual 42\n"
        }
      }
    },
    "D, unittest": {
      "display_name": "D, unittest",
      "filename_extension": [
        ".d"
      ],
      "image_name": "cyberdojofoundation/d_unittest:c125c91",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "gdc *.d -funittest -o run-tests\n\nif [ $? -eq 0 ]; then\n  ./run-tests\nfi\n"
        },
        "hiker.d": {
          "content": "module hiker;\r\n\r\nint answer()\r\n{\r\n    return 6 * 9;\r\n}\r\n"
        },
        "hiker_test.d": {
          "content": "import std.stdio;\nimport hiker;\n\nunittest\n{\n    assert(answer() == 42, \"answer() == 42\");\n}\n\nstring green_traffic_light_pattern()\n{\n    return \"All tests passed\";\n}\n\nvoid main()\n{\n    writeln(green_traffic_light_pattern());\n}"
        }
      }
    },
    "Elixir, ExUnit": {
      "display_name": "Elixir, ExUnit",
      "filename_extension": [
        ".ex"
      ],
      "image_name": "cyberdojofoundation/elixir_exunit:cef373a",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "config/config.exs": {
          "content": "# This file is responsible for configuring your application\r\n# and its dependencies with the aid of the Mix.Config module.\r\nuse Mix.Config\r\n\r\n# This configuration is loaded before any dependency and is restricted\r\n# to this project. If another project depends on this project, this\r\n# file won't be loaded nor affect the parent project. For this reason,\r\n# if you want to provide default values for your application for\r\n# 3rd-party users, it should be done in your \"mix.exs\" file.\r\n\r\n# You can configure for your application as:\r\n#\r\n#     config :hiker, key: :value\r\n#\r\n# And access this configuration in your application as:\r\n#\r\n#     Application.get_env(:hiker, :key)\r\n#\r\n# Or configure a 3rd-party app:\r\n#\r\n#     config :logger, level: :info\r\n#\r\n\r\n# It is also possible to import configuration files, relative to this\r\n# directory. For example, you can emulate configuration per environment\r\n# by uncommenting the line below and defining dev.exs, test.exs and such.\r\n# Configuration from the imported file will override the ones defined\r\n# here (which is why it is important to import them last).\r\n#\r\n#     import_config \"#{Mix.env}.exs\"\r\n"
        },
        "cyber-dojo.sh": {
          "content": "mix test"
        },
        "lib/hiker.ex": {
          "content": "defmodule HIKER do\r\n\r\n  def answer do\r\n    6 * 9\r\n  end\r\n\r\nend\r\n"
        },
        "mix.exs": {
          "content": "defmodule HIKER.Mixfile do\r\n  use Mix.Project\r\n\r\n  def project do\r\n    [app: :hiker,\r\n     version: \"0.0.1\",\r\n     elixir: \"~> 1.2\",\r\n     build_embedded: Mix.env == :prod,\r\n     start_permanent: Mix.env == :prod,\r\n     deps: deps]\r\n  end\r\n\r\n  # Configuration for the OTP application\r\n  #\r\n  # Type \"mix help compile.app\" for more information\r\n  def application do\r\n    [applications: [:logger]]\r\n  end\r\n\r\n  # Dependencies can be Hex packages:\r\n  #\r\n  #   {:mydep, \"~> 0.3.0\"}\r\n  #\r\n  # Or git/path repositories:\r\n  #\r\n  #   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}\r\n  #\r\n  # Type \"mix help deps\" for more examples and options\r\n  defp deps do\r\n    []\r\n  end\r\nend\r\n"
        },
        "test/hiker_test.exs": {
          "content": "defmodule HIKERTest do\r\n  use ExUnit.Case\r\n\r\n  test \"life the universe and everything\" do\r\n    assert HIKER.answer == 42\r\n  end\r\n\r\nend\r\n"
        },
        "test/test_helper.exs": {
          "content": "ExUnit.start()\r\n"
        }
      }
    },
    "Erlang, eunit": {
      "display_name": "Erlang, eunit",
      "filename_extension": [
        ".erl"
      ],
      "image_name": "cyberdojofoundation/erlang_eunit:d3860fc",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "Makefile": {
          "content": "\nSOURCES=$(wildcard *.erl)\nHEADERS=$(wildcard *.hrl)\nOBJECTS=$(SOURCES:%.erl=%.beam)\nTESTS=tests\n\nall : clean $(OBJECTS) test\n\nclean :\n\t@rm -f *.beam\n\n%.beam : %.erl $(HEADERS)\n\t@erlc $<\n\ntest :\n\t@rm -rf $(TESTS)\n\t@mkdir -p $(TESTS)\n\t@cp -f *_tests.beam $(TESTS)\n\t@erl -noshell -eval 'eunit:test({dir, \"$(TESTS)\"})' -s init stop"
        },
        "cyber-dojo.sh": {
          "content": "make\n"
        },
        "hiker.erl": {
          "content": "-module(hiker).\n-export([answer/0]).\n\nanswer() ->\n  6 * 9.\n"
        },
        "hiker_tests.erl": {
          "content": "-module(hiker_tests).\n-include_lib(\"eunit/include/eunit.hrl\").\n-import(hiker, [answer/0]).\n\nlife_the_universe_and_everything_test() ->\n  ?assertEqual(42, hiker:answer()).\n"
        }
      }
    },
    "F#, NUnit": {
      "display_name": "F#, NUnit",
      "filename_extension": [
        ".fs"
      ],
      "image_name": "cyberdojofoundation/fsharp_nunit:97dbdd7",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.fs": {
          "content": "module Hiker\n\nlet answer =\n  6 * 9\n"
        },
        "HikerTest.fs": {
          "content": "module HikerTest.``example``\n\nopen NUnit.Framework\n\n[<Test>]\nlet ``life, the universe, and everything.`` () =\n   Assert.AreEqual(42,Hiker.answer)\n   "
        },
        "cyber-dojo.sh": {
          "content": "readonly NUNIT_PATH=/usr/lib/cli/nunit.framework-2.6.3\n\nfsharpc \\\n  --nologo \\\n  --target:library \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n  -o RunTests.dll *.fs\n\nif [ $? -eq 0 ]; then\n  nunit-console -nologo ./RunTests.dll\nfi\n"
        }
      }
    },
    "Fortran, FUnit": {
      "display_name": "Fortran, FUnit",
      "filename_extension": [
        ".f90",
        ".fun"
      ],
      "image_name": "cyberdojofoundation/fortran_funit:f13f8ad",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "export CC=\"gcc\"\nexport CXX=\"g++\"\nexport FSFLAG=-I\n\nfunit hiker\n"
        },
        "hiker.f90": {
          "content": "\nfunction answer()\n  integer :: answer\n  answer = 6 * 9\nend function answer\n"
        },
        "hiker.fun": {
          "content": "test_suite hiker\n\nsetup\nend setup\n\nteardown\nend teardown\n\ntest life_the_universe_and_everything\n  integer :: actual\n  actual = answer()\n  assert_equal(42, actual)\nend test\n\n! Example test using all six assertions\ntest funit_assertions\n  integer, dimension(2) :: a = (/ 1, 2 /)\n  integer, dimension(2) :: b = (/ 1, 2 /)\n\n  assert_array_equal(a,b)\n  assert_real_equal(0.9999999e0, 1.0e0)\n  assert_equal_within(1e-7, 0.0, 1e-6)\n  assert_equal(1, 5 - 4)\n  assert_false(5 < 4)\n  assert_true(4 == 4)\nend test\n\nend test_suite\n"
        }
      }
    },
    "Go 1.18, testify": {
      "display_name": "Go 1.18, testify",
      "filename_extension": [
        ".go"
      ],
      "image_name": "cyberdojofoundation/go_testify:3f62bba",
      "max_seconds": 20,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "go test\n"
        },
        "hiker.go": {
          "content": "package hiker\n\nfunc answer() int {\n    return 6 * 9\n}\n"
        },
        "hiker_test.go": {
          "content": "package hiker\n\nimport (\n    \"testing\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_life_the_universe_and_everything(t *testing.T) {\n    assert.Equal(t, 42, answer())\n}\n"
        }
      }
    },
    "Go 1.23.4, testing": {
      "display_name": "Go 1.23.4, testing",
      "filename_extension": [
        ".go"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/go_testing:a3f0b41",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "go env -w GO111MODULE=auto\ngo test\n"
        },
        "hiker.go": {
          "content": "package hiker\n\nfunc answer() int {\n    return 6 * 9\n}\n"
        },
        "hiker_test.go": {
          "content": "package hiker\n\nimport (\"testing\")\n\nfunc Test_life_the_universe_and_everything(t *testing.T) {\n    if answer() != 42 {\n        t.Error(\"answer() != 42 as expected.\")\n    }\n}\n"
        }
      }
    },
    "Go, convey": {
      "display_name": "Go, convey",
      "filename_extension": [
        ".go"
      ],
      "image_name": "cyberdojofoundation/go_convey:f7e690a",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "go test\n"
        },
        "hiker.go": {
          "content": "package hiker\n\nfunc answer() int {\n    return 6 * 9\n}\n"
        },
        "hiker_test.go": {
          "content": "package hiker\n\nimport (\n    \"testing\"\n    . \"github.com/smartystreets/goconvey/convey\"\n)\n\nfunc Test_life_the_universe_and_everything(t *testing.T) {\n    Convey(\"A simple example to start you off\", t, func() {\n        So(answer(), ShouldEqual, 42)\n    })\n}\n"
        }
      }
    },
    "Groovy 4.0.23, JUnit 4.13.2": {
      "display_name": "Groovy 4.0.23, JUnit 4.13.2",
      "filename_extension": [
        ".groovy"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/groovy_junit:a0168a3",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.groovy": {
          "content": "\nclass Hiker {\n    def answer() { 6 * 9 }\n}\n"
        },
        "HikerTest.groovy": {
          "content": "import static org.junit.Assert.*\r\nimport org.junit.*\r\n\r\nclass HikerTest {\r\n    @Test\r\n    void life_the_universe_and_everything() {\r\n        def douglas = new Hiker()\r\n        assertTrue douglas.answer() == 42\r\n    }\r\n}\r\n"
        },
        "cyber-dojo.sh": {
          "content": "\ngroovyc *.groovy\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp .:$(ls /groovy/*.jar | xargs | sed -e 's/ /:/g') \\\n    org.junit.runner.JUnitCore \\\n      `ls -1 *Test*.class | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n"
        }
      }
    },
    "Groovy 4.0.23, Spock 2.4": {
      "display_name": "Groovy 4.0.23, Spock 2.4",
      "filename_extension": [
        ".groovy"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/groovy_spock:6e1460e",
      "max_seconds": 20,
      "tab_size": 4,
      "visible_files": {
        "Hiker.groovy": {
          "content": "\nclass Hiker {\n    def answer() { 6 * 9 }\n}\n"
        },
        "HikerSpec.groovy": {
          "content": "import spock.lang.*\n\nclass HikerSpec extends Specification {\n\n    def \"life the universe and everything\" () {\n        def douglas = new Hiker()\n        expect:\n            douglas.answer() == 42\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\n# There appears to be no way to pass all the Spec class names\n# to groovy in one go. So I'm calling groovy once for each one.\n# Groovy is so interminably ...sssssslllllllooooooowwwwwww....\n# that you're likely to timeout if you use more than 2 Spec classes!\n# Can you help?\n\nSPECS=($(ls *Spec.groovy | cut -d '.' -f 1))\nfor SPEC in \"${SPECS[@]}\"\ndo\n  groovy -cp /groovy/spock-core-2.4-M1-groovy-4.0.jar ${SPEC}\ndone\n"
        }
      }
    },
    "Haskell, hunit": {
      "display_name": "Haskell, hunit",
      "filename_extension": [
        ".hs"
      ],
      "image_name": "cyberdojofoundation/haskell_hunit:82ab170",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.hs": {
          "content": "module Hiker where\n\nanswer :: Int\nanswer = 6 * 9\n"
        },
        "cyber-dojo.sh": {
          "content": "runhaskell *test*.hs\n"
        },
        "test_Hiker.hs": {
          "content": "module Test_Hiker where\n\nimport Test.HUnit\nimport Hiker\n\nlife_the_universe_and_everything_test = TestCase (assertEqual \"answer\" (42) answer)\n\ntests = TestList [life_the_universe_and_everything_test]\nmain = do runTestTT tests\n"
        }
      }
    },
    "Java 21, Approval 24.9 with JUnit 5": {
      "display_name": "Java 21, Approval 24.9 with JUnit 5",
      "filename_extension": [
        ".java",
        ".txt"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_approval:e2178d4",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.java": {
          "content": "\npublic class Hiker {\n\n    public static int answer() {\n        return 6 * 9;\n    }\n}"
        },
        "HikerTest.java": {
          "content": "import org.junit.jupiter.api.*;\n\nimport org.approvaltests.Approvals;\nimport org.approvaltests.reporters.UseReporter;\nimport org.approvaltests.reporters.AutoApproveReporter;\nimport org.approvaltests.reporters.linux.ReportOnCyberDojo;\n\n// Use one of the following two lines!\n// @UseReporter(AutoApproveReporter.class) // this will automatically approve all results\n@UseReporter(ReportOnCyberDojo.class) // to get the diff in the console and a diff file\nclass HikerTest {\n\n    // if you want to change the expected result, \n    // move HikerTest.testAnswer.received.txt\n    // to   HikerTest.testAnswer.approved.txt\n    // to view the differences, \n    // open HikerTest.testAnswer.diff\n    @Test\n    void testAnswer() throws Exception {\n        int actual = Hiker.answer();\n        Approvals.verify(\"the answer is: \" + actual);\n    }\n}\n"
        },
        "HikerTest.testAnswer.approved.txt": {
          "content": "the answer is: 42"
        },
        "cyber-dojo.sh": {
          "content": "#! /bin/bash\nset -e\n\ncd ${CYBER_DOJO_SANDBOX}\n\n# Currently, using /approval in the classpath causes fatal errors such as\n# java.nio.file.AccessDeniedException: /approval/zipfstmp5701121991682355433.tmp\n# This is because /approval is read-only.\n# Working around this for now...\ncp -r /approval /tmp\nCLASSES=.:`ls /tmp/approval/*.jar | tr '\\n' ':'`\n\nif javac --enable-preview \\\n  --release 21 \\\n  -Xlint:preview \\\n  -Xlint:unchecked \\\n  -Xlint:deprecation \\\n  -cp $CLASSES \\\n  *.java;\nthen\n  java --enable-preview -jar /approval/junit-platform-console-standalone-1.11.3.jar \\\n      --disable-banner \\\n      --disable-ansi-colors \\\n      --details=tree \\\n      --details-theme=ascii \\\n      --class-path .:$CLASSES \\\n      --scan-class-path\nfi\n"
        }
      }
    },
    "Java 21, Cucumber 7.20.1 with JUnit 4": {
      "display_name": "Java 21, Cucumber 7.20.1 with JUnit 4",
      "filename_extension": [
        ".java",
        ".feature"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_cucumber_pico:1b7cee5",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "Hiker.feature": {
          "content": "\nFeature: hitch-hiker playing scrabble\n\nRule: the answer is always 42\n  Scenario: hitch-hiker playing scrabble in the past\n    Given the hitch-hiker selects some tiles\n    When they spell 6 times 9\n    Then the score is 42\n"
        },
        "Hiker.java": {
          "content": "\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n"
        },
        "HikerStepDef.java": {
          "content": "import org.junit.*;\nimport static org.junit.Assert.*;\nimport io.cucumber.java.en.*;\n\n\npublic class HikerStepDef {\n\n    private int answer;\n\n    @Given(\"the hitch-hiker selects some tiles\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"they spell {int} times {int}\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"the score is {int}\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n"
        },
        "README": {
          "content": "This Cucumber environment is bundled with:\n- PicoContainer DI framework\n- JMock2\n- Mockito\n"
        },
        "RunCukesTest.java": {
          "content": "import io.cucumber.junit.CucumberOptions;\nimport io.cucumber.junit.Cucumber;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(\n    monochrome = true,\n    plugin = { \"pretty\" }\n)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "CLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\n\njavac \\\n  --class-path $CLASSES  \\\n  --enable-preview \\\n  --release 21 \\\n  -Xlint:unchecked \\\n    *.java\n\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java \\\n    --class-path $CLASSES \\\n    --enable-preview \\\n    org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n"
        }
      }
    },
    "Java 21, Cucumber-Spring 7.20.1": {
      "display_name": "Java 21, Cucumber-Spring 7.20.1",
      "filename_extension": [
        ".java",
        ".feature"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_cucumber_spring:7cf0aee",
      "max_seconds": 15,
      "tab_size": 4,
      "visible_files": {
        "ApplicationContext.java": {
          "content": "import io.cucumber.spring.CucumberContextConfiguration;\nimport org.springframework.test.context.ContextConfiguration;\n\n@CucumberContextConfiguration\n@ContextConfiguration(classes=Hiker.class)\npublic class ApplicationContext\n{\n\n}\n"
        },
        "Hiker.feature": {
          "content": "\nFeature: hitch-hiker playing scrabble\n\nScenario: hitch-hiker playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n"
        },
        "Hiker.java": {
          "content": "\npublic class Hiker {\n\n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n"
        },
        "HikerStepDef.java": {
          "content": "import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport io.cucumber.java.en.*;\n\npublic class HikerStepDef {\n\n    @Autowired\n    private Hiker hiker;\n\n    private int answer;\n\n    @Given(\"the hitch-hiker selects some tiles\")\n    public void theHitchHikerSelectsSomeTiles() throws Throwable {\n    }\n\n    @When(\"they spell {int} times {int}\")\n    public void theySpellTimes(int arg1, int arg2) throws Throwable {\n        answer = Hiker.answer(arg1,arg2);\n    }\n\n    @Then(\"the score is {int}\")\n    public void theScoreIs(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n"
        },
        "README": {
          "content": "This Cucumber environment is bundled with:\n- Enough Spring to support DI in cucumber.xml\n  - you must explicitly declare beans in XML\n  - Do not use @Component, @Service or @Scope annotations\n- JMock2\n- Mockito\n"
        },
        "RunCukesTest.java": {
          "content": "import io.cucumber.junit.CucumberOptions;\nimport io.cucumber.junit.Cucumber;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(\n    monochrome = true,\n    plugin = { \"pretty\" }\n)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "CLASSES=.:`ls /cucumber/*.jar | tr '\\n' ':'`\n\njavac \\\n  --class-path $CLASSES  \\\n  --enable-preview \\\n  --release 21 \\\n  -Xlint:unchecked \\\n    *.java\n\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java \\\n    --class-path $CLASSES \\\n    --enable-preview \\\n    org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n"
        }
      }
    },
    "Java 21, JMock 2.13.1 with JUnit 4": {
      "display_name": "Java 21, JMock 2.13.1 with JUnit 4",
      "filename_extension": [
        ".java"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_jmock:1a88b80",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "AnswerSeeker.java": {
          "content": "\npublic interface AnswerSeeker {\n    void receiveAnswer(int theAnswer);\n}\n"
        },
        "DeepThought.java": {
          "content": "\npublic class DeepThought {\n\n    public DeepThought(AnswerSeeker answerSeeker) {\n        this.answerSeeker = answerSeeker;\n    }\n\n    public void computeForSevenMillionYears() {\n        answerSeeker.receiveAnswer(6 * 9);\n    }\n\n    private AnswerSeeker answerSeeker;\n}\n"
        },
        "DeepThoughtTest.java": {
          "content": "import org.junit.*;\nimport org.jmock.*;\nimport org.jmock.integration.junit4.*;\nimport static org.junit.Assert.*;\n\npublic class DeepThoughtTest {\n    @Rule public JUnitRuleMockery context = new JUnitRuleMockery();\n\n    AnswerSeeker answerSeeker = context.mock(AnswerSeeker.class);\n    DeepThought deepThought = new DeepThought(answerSeeker);\n\n    @Test\n    public void life_the_universe_and_everything() throws Exception {\n        context.checking(new Expectations() {{\n            oneOf(answerSeeker).receiveAnswer(42);\n        }});\n        deepThought.computeForSevenMillionYears();\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nCLASSES=.:`ls /jmock/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n"
        }
      }
    },
    "Java 21, JUnit 4 - SQLite 3.47": {
      "display_name": "Java 21, JUnit 4 - SQLite 3.47",
      "filename_extension": [
        ".java"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_junit_sqlite:eb414ab",
      "max_seconds": 10,
      "progress_regexs": [
        "Tests run\\: (\\d)+,(\\s)+Failures\\: (\\d)+",
        "OK \\((\\d)+ test(s)?\\)"
      ],
      "tab_size": 4,
      "visible_files": {
        "Hiker.java": {
          "content": "import java.sql.*;\n\npublic class Hiker {\n\n    public static void setup() {\n        String create_sql = \"CREATE TABLE IF NOT EXISTS earth \"\n            + \"(question text NOT NULL,\\n\"\n            + \"\tanswer int\\n\"\n            + \");\";\n        String delete_sql = \"DELETE FROM earth;\";\n        String insert_sql = \"INSERT INTO earth \"\n            + \" VALUES ('6 * 9', 54);\";\n\n        try (Connection connection = DriverManager.getConnection(connectionString);\n             Statement statement = connection.createStatement()) {\n            statement.execute(create_sql);\n            statement.execute(delete_sql);\n            statement.execute(insert_sql);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static int answer() {\n        String query_sql = \"SELECT answer FROM earth WHERE question='6 * 9';\";\n        try (Connection connection = DriverManager.getConnection(connectionString);\n             Statement statement = connection.createStatement()) {\n            ResultSet resultSet = statement.executeQuery(query_sql);\n            return resultSet.getInt(\"answer\");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static String connectionString =\n        \"jdbc:sqlite:/sandbox/hiker.db\";\n}\n"
        },
        "HikerTest.java": {
          "content": "import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class HikerTest {\n\n    @Before\n    public void setup_earth() {\n        Hiker.setup();\n    }\n\n    @Test\n    public void life_the_universe_and_everything() {\n        int expected = 42;\n        int actual = Hiker.answer();\n        assertEquals(expected, actual);\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nrm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore \\\n    `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` \\\n    | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n"
        }
      }
    },
    "Java 21, JUnit 5": {
      "display_name": "Java 21, JUnit 5",
      "filename_extension": [
        ".java"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_junit:30b6214",
      "max_seconds": 10,
      "progress_regexs": [
        "Failures (\\d)\\:",
        "^\\[\\s+(\\d+) tests successful\\s+\\]"
      ],
      "tab_size": 4,
      "visible_files": {
        "Hiker.java": {
          "content": "\npublic class Hiker {\n\n    public static int answer() {\n        return 6 * 9;\n    }\n}\n"
        },
        "HikerTest.java": {
          "content": "// A simple example to get you started\n// JUnit assertion - the default Java assertion library\n// https://junit.org/junit5/\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)\npublic class HikerTest {\n\n    @Test\n    void life_the_universe_and_everything() {\n        int expected = 42;\n        int actual = Hiker.answer();\n        assertEquals(expected, actual);\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "#! /bin/bash\nset -e\n\ncd ${CYBER_DOJO_SANDBOX}\n\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\n\nif javac -Xlint:preview -Xlint:unchecked -Xlint:deprecation -cp $CLASSES *.java; then\n  java -jar /junit/junit-platform-console-standalone-1.11.3.jar \\\n      --disable-banner \\\n      --disable-ansi-colors \\\n      --details=tree \\\n      --details-theme=ascii \\\n      --class-path . \\\n      --scan-class-path\nfi\n"
        }
      }
    },
    "Java 21, Mockito 5.14": {
      "display_name": "Java 21, Mockito 5.14",
      "filename_extension": [
        ".java"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_mockito:d24bed9",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.java": {
          "content": "public class Hiker {\n\n    public interface Listener {\n        void onAnswer(int answer);\n    }\n\n    public Hiker(Listener listener) {\n        this.listener = listener;\n    }\n\n    public void answer() {\n        listener.onAnswer(6 * 9);\n    }\n\n    private Listener listener;\n}\n"
        },
        "HikerTest.java": {
          "content": "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass HikerTest {\n\n    @Test\n    void life_the_universe_and_everything() {\n        Hiker.Listener listener = mock(Hiker.Listener.class);\n        Hiker douglas = new Hiker(listener);\n        douglas.answer();\n        verify(listener).onAnswer(42);\n        verifyNoMoreInteractions(listener);\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "#! /bin/bash\nset -e\n\ncd ${CYBER_DOJO_SANDBOX}\n\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\n\nif javac --enable-preview --release 21 -Xlint:preview -Xlint:unchecked -Xlint:deprecation -cp $CLASSES *.java; then\n  java --enable-preview -javaagent:/mockito/byte-buddy-agent-1.15.4.jar \\\n      -jar /mockito/junit-platform-console-standalone-1.11.3.jar \\\n      execute --disable-banner \\\n      --disable-ansi-colors \\\n      --details=tree \\\n      --details-theme=ascii \\\n      --class-path .:$CLASSES \\\n      --scan-class-path\nfi\n"
        }
      }
    },
    "Java 21, PowerMockito 2.0.9": {
      "display_name": "Java 21, PowerMockito 2.0.9",
      "filename_extension": [
        ".java"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/java_powermockito:81b2f4d",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "DiskLogger.java": {
          "content": "import java.io.*;\n\npublic final class DiskLogger {\n\n    public static DiskLogger getInstance() {\n        return singleton;\n    }\n\n    public void log(String line) {\n        Boolean append;\n        try (FileWriter fw = new FileWriter(\"hiker.log\", append=true)) {\n            fw.write(line + \"\\n\");\n        }\n        catch (IOException failure) {\n            throw new RuntimeException(failure);\n        }\n    }\n\n    private DiskLogger() {\n    }\n\n    private static DiskLogger singleton = new DiskLogger();\n}\n"
        },
        "FakeLogger.java": {
          "content": "import java.util.ArrayList;\n\npublic class FakeLogger {\n\n    public void log(String line) {\n        lines.add(line);\n    }\n\n    public Boolean endsWith(String line) {\n        return lines.get(lines.size() - 1).equals(line);\n    }\n\n    private ArrayList<String> lines = new ArrayList<String>();\n}\n"
        },
        "Hiker.java": {
          "content": "\npublic class Hiker {\n\n    public int answer() {\n        DiskLogger.getInstance().log(\"The answer is 6 * 7\");\n        return 6 * 9;\n    }\n\n}\n"
        },
        "HikerTest.java": {
          "content": "import org.junit.*;\nimport static org.junit.Assert.*;\nimport org.junit.runner.RunWith;\n\nimport org.powermock.modules.junit4.PowerMockRunner;\nimport org.powermock.core.classloader.annotations.PrepareForTest;\nimport org.powermock.core.classloader.annotations.PowerMockIgnore;\nimport static org.powermock.api.mockito.PowerMockito.*;\nimport org.mockito.stubbing.Answer;\nimport org.mockito.invocation.InvocationOnMock;\nimport static org.mockito.ArgumentMatchers.anyString;\n\n@RunWith(PowerMockRunner.class)\n@PowerMockIgnore(\"jdk.internal.reflect.*\")\n@PrepareForTest(DiskLogger.class)\npublic class HikerTest {\n\n    @Test\n    public void life_the_universe_and_everything() {\n        FakeLogger fakeLog = new FakeLogger();\n        use(fakeLog);\n\n        int expected = 42;\n        int actual = new Hiker().answer();\n        assertEquals(expected, actual);\n\n        assertTrue(fakeLog.endsWith(\"The answer is 6 * 7\"));\n    }\n\n    private void use(FakeLogger fake) {\n        mockStatic(DiskLogger.class);\n        DiskLogger mocked = mock(DiskLogger.class);\n        when(DiskLogger.getInstance()).thenReturn(mocked);\n\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              String line = (String)invocation.getArguments()[0];\n              fake.log(line); // <====\n              return null;\n            }\n        }).when(mocked).log(anyString());  // <====\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nCLASSES=.:`ls /powermockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java \n\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  java --add-opens java.base/java.lang=ALL-UNNAMED \\\n      --add-opens java.base/jdk.internal.loader=ALL-UNNAMED \\\n      --add-opens java.base/java.security=ALL-UNNAMED \\\n      -cp $CLASSES org.junit.runner.JUnitCore \\\n      `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n"
        }
      }
    },
    "JavaScript 23.6, Cucumber 11.2": {
      "display_name": "JavaScript 23.6, Cucumber 11.2",
      "filename_extension": [
        ".js",
        ".feature"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_cucumber:93280de",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        ".jshintrc": {
          "content": "{\n    // DO NOT WANT TO USE JSHINT =>\n    // DELETE THIS FILE\n    //\n    // JSHint Default Configuration File (as on JSHint website)\n    // See http://jshint.com/docs/ for more details\n\n    \"maxerr\"        : 50,       // {int} Maximum error before stopping\n\n    // Enforcing\n    \"bitwise\"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)\n    \"camelcase\"     : false,    // true: Identifiers must be in camelCase\n    \"curly\"         : true,     // true: Require {} for every new block or scope\n    \"eqeqeq\"        : true,     // true: Require triple equals (===) for comparison\n    \"forin\"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()\n    \"freeze\"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.\n    \"immed\"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n    \"indent\"        : false,        // {int} Number of spaces to use for indentation\n    \"latedef\"       : false,    // true: Require variables/functions to be defined before being used\n    \"newcap\"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`\n    \"noarg\"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`\n    \"noempty\"       : true,     // true: Prohibit use of empty blocks\n    \"nonbsp\"        : true,     // true: Prohibit \"non-breaking whitespace\" characters.\n    \"nonew\"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)\n    \"plusplus\"      : false,    // true: Prohibit use of `++` and `--`\n    \"quotmark\"      : false,    // Quotation mark consistency:\n                                //   false    : do nothing (default)\n                                //   true     : ensure whatever is used is consistent\n                                //   \"single\" : require single quotes\n                                //   \"double\" : require double quotes\n    \"undef\"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)\n    \"unused\"        : true,     // Unused variables:\n                                //   true     : all variables, last function parameter\n                                //   \"vars\"   : all variables only\n                                //   \"strict\" : all variables, all function parameters\n    \"strict\"        : true,     // true: Requires all functions run in ES5 Strict Mode\n    \"maxparams\"     : false,    // {int} Max number of formal params allowed per function\n    \"maxdepth\"      : false,    // {int} Max depth of nested blocks (within functions)\n    \"maxstatements\" : false,    // {int} Max number statements per function\n    \"maxcomplexity\" : false,    // {int} Max cyclomatic complexity per function\n    \"maxlen\"        : false,    // {int} Max number of characters per line\n    \"varstmt\"       : false,    // true: Disallow any var statements. Only `let` and `const` are allowed.\n\n    // Relaxing\n    \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n    \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n    \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n    \"eqnull\"        : false,     // true: Tolerate use of `== null`\n    \"es5\"           : false,      // true: Allow ES5 syntax (ex: getters and setters)\n    \"esnext\"        : true,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n    \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                                 // (ex: `for each`, multiple try/catch, function expression…)\n    \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n    \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n    \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\n    \"globalstrict\"  : false,     // true: Allow global \"use strict\" (also enables 'strict')\n    \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n    \"lastsemic\"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n    \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n    \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n    \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n    \"multistr\"      : false,     // true: Tolerate multi-line strings\n    \"noyield\"       : false,     // true: Tolerate generator functions with no yield statement in them.\n    \"notypeof\"      : false,     // true: Tolerate invalid typeof operator values\n    \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n    \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n    \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n    \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n    \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n    \"validthis\"     : true,     // true: Tolerate using this in a non-constructor function\n\n    // Environments\n    \"browser\"       : false,     // Web Browser (window, document, etc)\n    \"browserify\"    : false,    // Browserify (node.js code in the browser)\n    \"couch\"         : false,    // CouchDB\n    \"devel\"         : true,     // Development/debugging (alert, confirm, etc)\n    \"dojo\"          : false,    // Dojo Toolkit\n    \"jasmine\"       : false,    // Jasmine\n    \"jquery\"        : false,    // jQuery\n    \"mocha\"         : true,     // Mocha\n    \"mootools\"      : false,    // MooTools\n    \"node\"          : true,    // Node.js\n    \"nonstandard\"   : false,    // Widely adopted globals (escape, unescape, etc)\n    \"phantom\"       : false,    // PhantomJS\n    \"prototypejs\"   : false,    // Prototype and Scriptaculous\n    \"qunit\"         : false,    // QUnit\n    \"rhino\"         : false,    // Rhino\n    \"shelljs\"       : false,    // ShellJS\n    \"typed\"         : false,    // Globals for typed array constructions\n    \"worker\"        : false,    // Web Workers\n    \"wsh\"           : false,    // Windows Scripting Host\n    \"yui\"           : false,    // Yahoo User Interface\n\n    // Custom Globals\n    \"globals\"       : {}        // additional predefined global variables\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nPATH=/home/sandbox/node_modules/@cucumber/cucumber/bin:${PATH}\n\nif [ -f .jshintrc ]; then\n  jshint --config .jshintrc *.js\nfi\n\nif [ $? == 0 ]; then\n  cd /home/sandbox\n  cucumber-js \\\n    --format-options '{\"colorsEnabled\":false}' \\\n    ${CYBER_DOJO_SANDBOX}/*.feature\nfi\n"
        },
        "hiker.feature": {
          "content": "Feature: hitch-hiker playing scrabble\n\n  Scenario: hitch-hiker playing scrabble in the past\n    Given the hitch-hiker selects some tiles\n    When they spell 6 times 9\n    Then the score is 42\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nfunction answer(a, b) {\n  return a * b;\n}\n"
        },
        "hiker_steps.js": {
          "content": "'use strict';\n\nconst {Given,When,Then} = require('@cucumber/cucumber');\nconst assert = require('assert');\nconst hiker = require('./hiker');\n\nlet score;\n\nGiven(/^the hitch-hiker selects some tiles$/, function() {\n});\n\nWhen(/^they spell (\\d+) times (\\d+)$/, function(a, b) {\n  score = hiker.answer(parseInt(a), parseInt(b));\n});\n\nThen(/^the score is (\\d+)$/, function(expectedScore) {\n  assert.equal(score, expectedScore);\n});\n"
        }
      }
    },
    "JavaScript 23.6, Jasmine 5.5": {
      "display_name": "JavaScript 23.6, Jasmine 5.5",
      "filename_extension": [
        ".js"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_jasmine:6302c53",
      "max_seconds": 10,
      "progress_regexs": [
        "/(d+) specs?, ([1-9]d*) failures?/",
        "/(d+) specs?, (0) failures?/"
      ],
      "tab_size": 2,
      "visible_files": {
        ".eslintrc.json": {
          "content": "{\n    \"parserOptions\": {\n        \"ecmaVersion\": 8,\n        \"sourceType\": \"module\"\n    },\n    \"rules\": {\n        \"semi\": \"error\"\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nfunction cyber_dojo_exit()\n{\n  # Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .nyc_output # ...\n  #cyber_dojo_delete_files ...\n}\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# --------------------------------------------------------------\nln -s /etc/jasmine/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\nnpm run lint\nnpm run test\n"
        },
        "hiker-spec.js": {
          "content": "'use strict';\n\nconst hiker = require('./hiker.js');\n\ndescribe('answer', () => {\n  it('to life the universe and everything', () => {\n    expect(hiker.answer()).toEqual(42);\n  });\n});\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nfunction answer() {\n  return 6 * 9;\n}\n"
        },
        "jasmine.json": {
          "content": "{\n    \"spec_dir\": \".\",\n    \"spec_files\": [ \"*[sS]pec.js\" ],\n    \"helpers\": [ \"*helper.js\" ]\n}\n"
        },
        "package.json": {
          "content": "{\n  \"scripts\": {\n    \"lint\": \"eslint --config ${CYBER_DOJO_SANDBOX}/.eslintrc.json /**/*.js\",\n    \"test\": \"nyc jasmine JASMINE_CONFIG_PATH=\\\"${CYBER_DOJO_SANDBOX}/jasmine.json\\\"\"\n  },\n  \"nyc\": {\n    \"reporter\": [ \"text\" ]\n  }\n}\n"
        }
      }
    },
    "JavaScript 23.6, Jest 29.7": {
      "display_name": "JavaScript 23.6, Jest 29.7",
      "filename_extension": [
        ".js"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_jest:9d0baa7",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        ".eslintrc.json": {
          "content": "{\n    \"parserOptions\": {\n        \"ecmaVersion\": 8,\n        \"sourceType\": \"module\"\n    },\n    \"rules\": {\n        \"semi\": \"error\"\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nln -s /etc/jest/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\nnpm run lint\nnpm run test\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nfunction answer() {\n  return 6 * 9;\n}\n\nmodule.exports = answer;\n"
        },
        "hiker.test.js": {
          "content": "'use strict';\n\nconst answer = require('./hiker');\n\ndescribe('answer', () => {\n  it('to life the universe and everything', () => {\n    expect(answer()).toEqual(42);\n  });\n});\n"
        },
        "package.json": {
          "content": "{\n  \"scripts\": {\n    \"lint\": \"eslint --config ${CYBER_DOJO_SANDBOX}/.eslintrc.json /**/*.js\",\n    \"test\": \"jest --coverage\"\n  },\n  \"jest\": {\n    \"coverageReporters\": [ \"text\" ]\n  }\n}\n"
        }
      }
    },
    "JavaScript 23.6, Mocha 11.0.1/chai 5.12/sinon 19.0.2/sinon-chai 4.0": {
      "display_name": "JavaScript 23.6, Mocha 11.0.1/chai 5.12/sinon 19.0.2/sinon-chai 4.0",
      "filename_extension": [
        ".js"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_mocha_chai_sinon:8865dcb",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "config.js": {
          "content": "// global config file so each test does not need to be configured\n// you can probably leave this file alone\n\nconst chai = require('chai');\nconst sinonChai = require('sinon-chai').default;\n\nglobal.sinon = require('sinon');\n\n// although you will probably only choose one style\n// assert, expect, and should are all here\n\nglobal.assert = chai.assert;\nglobal.expect = chai.expect;\nglobal.should = chai.should(); // Note that should has to be executed\n\nchai.config.includeStack = true;\nchai.use(sinonChai);\n"
        },
        "crib_chai.txt": {
          "content": "'use strict';\n\n//----------------------------------------------------\n// This is a TEXT file giving examples of chai tests.\n//----------------------------------------------------\n\nconst the = require('./hiker.js');\n\ndescribe('Assert Style: Answer', function () {\n  it('to life the universe and everything', function () {\n    assert.equal(the.answer(), 42);\n  });\n});\n\ndescribe('Expect Style: Answer', function () {\n  it('to life the universe and everything', function () {\n    expect(the.answer()).to.equal(42);\n  });\n});\n\ndescribe('Should Style: Answer', function () {\n  it('to life the universe and everything', function () {\n    the.answer().should.equal(42);\n  });\n});\n"
        },
        "crib_sinon.txt": {
          "content": "'use strict';\n\n//----------------------------------------------------\n// This is a TEXT file giving examples of sinon tests.\n//----------------------------------------------------\n\n//hello would normally be defined in your module\nfunction hello(name, cb) {\n  cb('hello ' + name);\n}\n\ndescribe('hello with callback', function() {\n  var cb;\n\n  //arrange and act here\n  beforeEach(function() {\n    cb = sinon.spy();\n    hello('foo', cb);\n  });\n\n  it('assert call callback with correct greeting with ' +\n    'sinon + chai assert',\n    function() {\n      assert(cb.calledWith('hello foo'));\n    });\n\n  it('should call callback with correct greeting with ' +\n    'sinon + chai expect',\n    function() {\n      expect(cb.calledWith('hello foo')).to.be.ok;\n    });\n\n  it('should call callback with correct greeting with ' +\n    'sinon + chai should',\n    function() {\n      cb.calledWith('hello foo').should.be.ok;\n    });\n\n  it('expect call callback with correct greeting with ' +\n    'chai expect + sinon + sinon-chai',\n    function() {\n      expect(cb).to.have.been.calledWith('hello foo');\n    });\n\n  it('should call callback with correct greeting with ' +\n    'chai should + sinon + sinon-chai',\n    function() {\n      cb.should.have.been.calledWith('hello foo');\n    });\n});\n"
        },
        "cyber-dojo.sh": {
          "content": "# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nfunction cyber_dojo_exit()\n{\n  # Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .nyc_output # ...\n  #cyber_dojo_delete_files ...\n}\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# --------------------------------------------------------------\nln -s /etc/mocha/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\nnpm run lint\nnpm run test\n"
        },
        "eslint.config.js": {
          "content": "\nmodule.exports =\n    {\n        languageOptions: {\n            ecmaVersion: 8,\n            sourceType: \"module\"\n        }\n    },\n    {\n        rules: {\n            semi: [\"error\"]\n        }\n    }\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nfunction answer() {\n  return 6 * 9;\n}\n"
        },
        "hikerTest.js": {
          "content": "'use strict';\n\nconst hiker = require('./hiker.js');\n\ndescribe('Should Style: Answer', () => {\n  it('to life the universe and everything', () => {\n    hiker.answer().should.equal(42);\n  });\n});\n"
        },
        "package.json": {
          "content": "{\n  \"scripts\": {\n    \"lint\": \"eslint --config ${CYBER_DOJO_SANDBOX}/eslint.config.js /**/*.js\",\n    \"test\": \"nyc mocha --require config.js --no-colors *Test.js\"\n  },\n  \"nyc\": {\n    \"reporter\": [ \"text\" ]\n  },\n  \"type\": \"commonjs\"\n}\n"
        }
      }
    },
    "JavaScript 23.6, assert": {
      "display_name": "JavaScript 23.6, assert",
      "filename_extension": [
        ".js"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_assert:aba164b",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        ".jshintrc": {
          "content": "{\n    // DO NOT WANT TO USE JSHINT =>\n    // DELETE THIS FILE\n    //\n    // JSHint Default Configuration File (as on JSHint website)\n    // See http://jshint.com/docs/ for more details\n\n    \"maxerr\"        : 50,       // {int} Maximum error before stopping\n\n    // Enforcing\n    \"bitwise\"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)\n    \"camelcase\"     : false,    // true: Identifiers must be in camelCase\n    \"curly\"         : true,     // true: Require {} for every new block or scope\n    \"eqeqeq\"        : true,     // true: Require triple equals (===) for comparison\n    \"forin\"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()\n    \"freeze\"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.\n    \"immed\"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n    \"indent\"        : false,        // {int} Number of spaces to use for indentation\n    \"latedef\"       : false,    // true: Require variables/functions to be defined before being used\n    \"newcap\"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`\n    \"noarg\"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`\n    \"noempty\"       : true,     // true: Prohibit use of empty blocks\n    \"nonbsp\"        : true,     // true: Prohibit \"non-breaking whitespace\" characters.\n    \"nonew\"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)\n    \"plusplus\"      : false,    // true: Prohibit use of `++` and `--`\n    \"quotmark\"      : false,    // Quotation mark consistency:\n                                //   false    : do nothing (default)\n                                //   true     : ensure whatever is used is consistent\n                                //   \"single\" : require single quotes\n                                //   \"double\" : require double quotes\n    \"undef\"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)\n    \"unused\"        : true,     // Unused variables:\n                                //   true     : all variables, last function parameter\n                                //   \"vars\"   : all variables only\n                                //   \"strict\" : all variables, all function parameters\n    \"strict\"        : true,     // true: Requires all functions run in ES5 Strict Mode\n    \"maxparams\"     : false,    // {int} Max number of formal params allowed per function\n    \"maxdepth\"      : false,    // {int} Max depth of nested blocks (within functions)\n    \"maxstatements\" : false,    // {int} Max number statements per function\n    \"maxcomplexity\" : false,    // {int} Max cyclomatic complexity per function\n    \"maxlen\"        : false,    // {int} Max number of characters per line\n    \"varstmt\"       : false,    // true: Disallow any var statements. Only `let` and `const` are allowed.\n\n    // Relaxing\n    \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n    \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n    \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n    \"eqnull\"        : false,     // true: Tolerate use of `== null`\n    \"es5\"           : false,      // true: Allow ES5 syntax (ex: getters and setters)\n    \"esnext\"        : true,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n    \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                                 // (ex: `for each`, multiple try/catch, function expression…)\n    \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n    \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n    \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\n    \"globalstrict\"  : false,     // true: Allow global \"use strict\" (also enables 'strict')\n    \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n    \"lastsemic\"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n    \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n    \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n    \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n    \"multistr\"      : false,     // true: Tolerate multi-line strings\n    \"noyield\"       : false,     // true: Tolerate generator functions with no yield statement in them.\n    \"notypeof\"      : false,     // true: Tolerate invalid typeof operator values\n    \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n    \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n    \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n    \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n    \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n    \"validthis\"     : true,     // true: Tolerate using this in a non-constructor function\n\n    // Environments\n    \"browser\"       : false,     // Web Browser (window, document, etc)\n    \"browserify\"    : false,    // Browserify (node.js code in the browser)\n    \"couch\"         : false,    // CouchDB\n    \"devel\"         : true,     // Development/debugging (alert, confirm, etc)\n    \"dojo\"          : false,    // Dojo Toolkit\n    \"jasmine\"       : false,    // Jasmine\n    \"jquery\"        : false,    // jQuery\n    \"mocha\"         : true,     // Mocha\n    \"mootools\"      : false,    // MooTools\n    \"node\"          : true,    // Node.js\n    \"nonstandard\"   : false,    // Widely adopted globals (escape, unescape, etc)\n    \"phantom\"       : false,    // PhantomJS\n    \"prototypejs\"   : false,    // Prototype and Scriptaculous\n    \"qunit\"         : false,    // QUnit\n    \"rhino\"         : false,    // Rhino\n    \"shelljs\"       : false,    // ShellJS\n    \"typed\"         : false,    // Globals for typed array constructions\n    \"worker\"        : false,    // Web Workers\n    \"wsh\"           : false,    // Windows Scripting Host\n    \"yui\"           : false,    // Yahoo User Interface\n\n    // Custom Globals\n    \"globals\"       : {}        // additional predefined global variables\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nif [ -f .jshintrc ]; then\n  jshint --config .jshintrc *.js\nfi\n\nif [ $? == 0 ]; then\n  node *Test*.js\nfi\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nfunction answer() {\n  return 6 * 9;\n}\n"
        },
        "hikerTest.js": {
          "content": "'use strict';\n\nconst hiker = require('./hiker.js');\nconst assert = require('assert');\n\nassert.equal(hiker.answer(), 42 );\n\n// - - - - - - - - - - - - - - - - - - - - - -\n\nconst greenTrafficLightPattern = function() {\n  return 'All tests passed';\n};\nconsole.log(greenTrafficLightPattern());\n"
        }
      }
    },
    "JavaScript 23.6, assert+jQuery 3.7.1": {
      "display_name": "JavaScript 23.6, assert+jQuery 3.7.1",
      "filename_extension": [
        ".js",
        ".html"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_assert_jquery:6826ced",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        ".jshintrc": {
          "content": "{\n    // DO NOT WANT TO USE JSHINT =>\n    // DELETE THIS FILE\n    //\n    // JSHint Default Configuration File (as on JSHint website)\n    // See http://jshint.com/docs/ for more details\n\n    \"maxerr\"        : 50,       // {int} Maximum error before stopping\n\n    // Enforcing\n    \"bitwise\"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)\n    \"camelcase\"     : false,    // true: Identifiers must be in camelCase\n    \"curly\"         : true,     // true: Require {} for every new block or scope\n    \"eqeqeq\"        : true,     // true: Require triple equals (===) for comparison\n    \"forin\"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()\n    \"freeze\"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.\n    \"immed\"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n    \"indent\"        : false,        // {int} Number of spaces to use for indentation\n    \"latedef\"       : false,    // true: Require variables/functions to be defined before being used\n    \"newcap\"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`\n    \"noarg\"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`\n    \"noempty\"       : true,     // true: Prohibit use of empty blocks\n    \"nonbsp\"        : true,     // true: Prohibit \"non-breaking whitespace\" characters.\n    \"nonew\"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)\n    \"plusplus\"      : false,    // true: Prohibit use of `++` and `--`\n    \"quotmark\"      : false,    // Quotation mark consistency:\n                                //   false    : do nothing (default)\n                                //   true     : ensure whatever is used is consistent\n                                //   \"single\" : require single quotes\n                                //   \"double\" : require double quotes\n    \"undef\"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)\n    \"unused\"        : true,     // Unused variables:\n                                //   true     : all variables, last function parameter\n                                //   \"vars\"   : all variables only\n                                //   \"strict\" : all variables, all function parameters\n    \"strict\"        : true,     // true: Requires all functions run in ES5 Strict Mode\n    \"maxparams\"     : false,    // {int} Max number of formal params allowed per function\n    \"maxdepth\"      : false,    // {int} Max depth of nested blocks (within functions)\n    \"maxstatements\" : false,    // {int} Max number statements per function\n    \"maxcomplexity\" : false,    // {int} Max cyclomatic complexity per function\n    \"maxlen\"        : false,    // {int} Max number of characters per line\n    \"varstmt\"       : false,    // true: Disallow any var statements. Only `let` and `const` are allowed.\n\n    // Relaxing\n    \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n    \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n    \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n    \"eqnull\"        : false,     // true: Tolerate use of `== null`\n    \"es5\"           : false,      // true: Allow ES5 syntax (ex: getters and setters)\n    \"esnext\"        : true,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n    \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                                 // (ex: `for each`, multiple try/catch, function expression…)\n    \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n    \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n    \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\n    \"globalstrict\"  : false,     // true: Allow global \"use strict\" (also enables 'strict')\n    \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n    \"lastsemic\"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n    \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n    \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n    \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n    \"multistr\"      : false,     // true: Tolerate multi-line strings\n    \"noyield\"       : false,     // true: Tolerate generator functions with no yield statement in them.\n    \"notypeof\"      : false,     // true: Tolerate invalid typeof operator values\n    \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n    \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n    \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n    \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n    \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n    \"validthis\"     : true,     // true: Tolerate using this in a non-constructor function\n\n    // Environments\n    \"browser\"       : false,     // Web Browser (window, document, etc)\n    \"browserify\"    : false,    // Browserify (node.js code in the browser)\n    \"couch\"         : false,    // CouchDB\n    \"devel\"         : true,     // Development/debugging (alert, confirm, etc)\n    \"dojo\"          : false,    // Dojo Toolkit\n    \"jasmine\"       : false,    // Jasmine\n    \"jquery\"        : false,    // jQuery\n    \"mocha\"         : true,     // Mocha\n    \"mootools\"      : false,    // MooTools\n    \"node\"          : true,    // Node.js\n    \"nonstandard\"   : false,    // Widely adopted globals (escape, unescape, etc)\n    \"phantom\"       : false,    // PhantomJS\n    \"prototypejs\"   : false,    // Prototype and Scriptaculous\n    \"qunit\"         : false,    // QUnit\n    \"rhino\"         : false,    // Rhino\n    \"shelljs\"       : false,    // ShellJS\n    \"typed\"         : false,    // Globals for typed array constructions\n    \"worker\"        : false,    // Web Workers\n    \"wsh\"           : false,    // Windows Scripting Host\n    \"yui\"           : false,    // Yahoo User Interface\n\n    // Custom Globals\n    \"globals\"       : {}        // additional predefined global variables\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "\nexport NODE_PATH=/usr/local/lib/node_modules\n\nif [ -f .jshintrc ]; then\n  jshint --config .jshintrc *.js\nfi\n\nif [ $? == 0 ]; then\n  node *Test*.js\nfi\n"
        },
        "hiker.html": {
          "content": "<html>\n  <head>\n  </head>\n  <body>\n    <question>what is 6 * 9</question>\n    <answer>54</answer>\n  </body>\n</html>"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nconst jqa = require('./jQueryAdapter.js');\n\nfunction answer() {\n  const $ = jqa.file('hiker.html');\n  return $('answer').text();\n}\n"
        },
        "hikerTest.js": {
          "content": "'use strict';\n\nconst hiker = require('./hiker.js');\nconst assert = require('assert');\n\nassert.equal(hiker.answer(), '42');\n\n// - - - - - - - - - - - - - - - - - - - - - -\n\nconst greenTrafficLightPattern = function() {\n  return 'All tests passed';\n};\nconsole.log(greenTrafficLightPattern());\n"
        },
        "jQueryAdapter.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  dom,\n  file\n};\n\nconst fs = require('fs');\nconst jquery = require('jquery');\nconst { JSDOM } = require('jsdom');\n\nfunction dom(html) {\n  const dom = new JSDOM(html);\n  return jquery(dom.window);\n}\n\nfunction file(filename) {\n  const markUp = fs.readFileSync(filename);\n  return dom(markUp.toString());\n}\n"
        }
      }
    },
    "JavaScript 23.6, qunit 2.23.1/sinon 19.0.2": {
      "display_name": "JavaScript 23.6, qunit 2.23.1/sinon 19.0.2",
      "filename_extension": [
        ".js"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/javascript_node_qunit_sinon:f715c86",
      "max_seconds": 10,
      "progress_regexs": [
        "/W*d+W+d+W+d+W+([1-9]d*)W+(d+)W+d+W+/",
        "/W*d+W+d+W+d+W+(0)W+d+W+d+W+/"
      ],
      "tab_size": 2,
      "visible_files": {
        ".eslintrc.json": {
          "content": "{\n    \"parserOptions\": {\n        \"ecmaVersion\": 8,\n        \"sourceType\": \"module\"\n    },\n    \"rules\": {\n        \"semi\": \"error\"\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nfunction cyber_dojo_exit()\n{\n  # Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .nyc_output # ...\n  #cyber_dojo_delete_files ...\n}\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# --------------------------------------------------------------\nln -s /etc/qunit_sinon/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\nnpm run lint\nnpm run test\n"
        },
        "hiker-test.js": {
          "content": "'use strict';\n\nconst hiker = require('./hiker.js');\n\nQUnit.test('answer', function(assert) {\n    const info = 'to life the universe and everything';\n    assert.equal(hiker.answer(), 42, info);\n});\n"
        },
        "hiker.js": {
          "content": "'use strict';\n\nmodule.exports = {\n  answer\n};\n\nfunction answer() {\n  return 6 * 9;\n}\n"
        },
        "package.json": {
          "content": "{\n  \"scripts\": {\n    \"lint\": \"eslint --config ${CYBER_DOJO_SANDBOX}/.eslintrc.json /**/*.js\",\n    \"test\": \"nyc qunit-cli *test*.js\"\n  },\n  \"nyc\": {\n    \"reporter\": [ \"text\" ]\n  }\n}\n"
        }
      }
    },
    "Julia, test": {
      "display_name": "Julia, test",
      "filename_extension": [
        ".jl"
      ],
      "image_name": "cyberdojofoundation/julia_test:81ccc5d",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.jl": {
          "content": "module Hiker\nexport answer\n\nanswer() = 6 * 9\n\nend\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\njulia \\\n  --banner=no \\\n  --color=no \\\n  runtests.jl\n\necho All tests passed\n"
        },
        "runtests.jl": {
          "content": "include(\"Hiker.jl\")\nimport .Hiker\nusing Test\n\n@test Hiker.answer() == 42\n"
        }
      }
    },
    "Kotlin 2.0.21, Kotest 5.9.1": {
      "display_name": "Kotlin 2.0.21, Kotest 5.9.1",
      "filename_extension": [
        ".kt"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/kotlin_kotest:37a0736",
      "max_seconds": 20,
      "tab_size": 4,
      "visible_files": {
        "Hiker.kt": {
          "content": "package hiker\n\nfun answer():Int {\n    return 6 * 9\n}\n"
        },
        "HikerTest.kt": {
          "content": "// [X] See please-help.txt \n\npackage hiker /*[X]*/\n\nimport io.kotest.core.spec.style.StringSpec\nimport io.kotest.matchers.shouldBe\nimport io.kotest.matchers.shouldNotBe\n\n\nclass HikerTest : StringSpec() { /*[X]*/\n\n    init {\n        \"Example Test\" {\n            hiker.answer() shouldBe 42\n        }\n\n        \"Other example test\" {\n            \"a\" shouldNotBe \"b\"\n        }\n    }\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "# [X] See hard-wired-test-name.txt\n\nCLASSES=.:`ls /usr/share/kotlin/kotlinc/lib/*.jar | tr '\\n' ':'`\nCLASSES=`ls /kotlin/*.jar | tr '\\n' ':'`${CLASSES}\nkotlinc *.kt -include-runtime -cp $CLASSES\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES \\\n    io.kotest.engine.launcher.MainKt \\\n    --spec hiker.HikerTest \\\n    --termcolor true\n    # [X]\nfi\n"
        },
        "please-help.txt": {
          "content": "\nA KotlinTest project usually executes with Gradle or Maven,\nand these tools know how to find all the test classes and\nexecute them one by one.\n\ncyber-dojo uses the command-line only, so we don't have that\nkind of intelligence out-of-the-box. Maybe you can help?\nIf so please email feedback@cyber-dojo.org\n\nTo get something working the test package and test class name\nis hard-wired in the cyber-dojo.sh file. If you change the\ntest package name and/or the test class name you must update\ncyber-dojo.sh appropriately.\n\nNote that cyber-dojo.sh uses the option [--writer basic]\nwhich writes red/green terminal colour codes to the output.\nThese don't render properly in a plain textarea and there appears\nto be no way to turn it off. Maybe you can help?\nIf so please email feedback@cyber-dojo.org\n\nIf you write more than one test with the same name kotlin-test\nappears to run no tests at all! Maybe you can help?\nIf so please email feedback@cyber-dojo.org\n"
        }
      }
    },
    "PHP, PHPUnit": {
      "display_name": "PHP, PHPUnit",
      "filename_extension": [
        ".php"
      ],
      "image_name": "cyberdojofoundation/php_unit:3ad3259",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.php": {
          "content": "<?php\n\nfunction answer()\n{\n    return 6 * 9;\n}\n\n?>\n"
        },
        "HikerTest.php": {
          "content": "<?php\nrequire_once 'Hiker.php';\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass HikerTest extends TestCase\n{\n    public function testLife_the_universe_and_everything()\n    {\n        $this->assertEquals(42, answer());\n    }\n}\n\n?>\n"
        },
        "cyber-dojo.sh": {
          "content": "phpunit --do-not-cache-result --verbose .\n"
        }
      }
    },
    "Pascal (FreePascal), assert": {
      "display_name": "Pascal (FreePascal), assert",
      "filename_extension": [
        ".pas"
      ],
      "image_name": "cyberdojofoundation/freepascal_assert:71a06f3",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "# FreePascal only supports one source file\n# and drags in the other units\nfpc hiker.tests.pas -Sa\n./hiker.tests\n"
        },
        "hiker.pas": {
          "content": "unit hiker;\n\ninterface\n   function answer: integer;\n\nimplementation\n\nfunction answer: integer;\nbegin\n   answer := 6 * 9;\nend;\n\nend.\n\n"
        },
        "hiker.tests.pas": {
          "content": "uses hiker;\n\nprocedure life_the_universe_and_everything();\nbegin\n   assert(answer() = 42);\n   WriteLn(answer());\nend;\n\nfunction green_traffic_light_pattern: string;\nbegin    \n   green_traffic_light_pattern := 'All tests passed';\nend;\n\nbegin\n   life_the_universe_and_everything();\n   WriteLn(green_traffic_light_pattern());\nend.\n\n"
        }
      }
    },
    "Perl, Test::Simple": {
      "display_name": "Perl, Test::Simple",
      "filename_extension": [
        ".pl",
        ".t"
      ],
      "image_name": "cyberdojofoundation/perl_test_simple:6dd47c6",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "perl -I . *.t\n"
        },
        "hiker.pl": {
          "content": "sub answer {\n  return 6 * 9;\n}\n\n1;\n"
        },
        "hiker.t": {
          "content": "use strict;\nuse warnings 'all';\nuse Test::Simple tests => 1; # number of tests (max=254)\n\nrequire \"hiker.pl\";\n\nok( answer() == 42, \"Life, the universe, and everything\" );\n"
        }
      }
    },
    "Prolog, plunit": {
      "display_name": "Prolog, plunit",
      "filename_extension": [
        ".pl",
        ".plt"
      ],
      "image_name": "cyberdojofoundation/prolog_plunit:b4a8498",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "swipl -g run_tests *.plt\n"
        },
        "hiker.pl": {
          "content": ":- module(hiker, [answer/1]).\n\nanswer(X) :- X is 6 * 9.\n"
        },
        "hiker.plt": {
          "content": ":- consult(hiker).\n:- begin_tests(hiker).\n\ntest(answer) :- answer(42).\n\n:- end_tests(hiker).\n"
        }
      }
    },
    "Python 3.13, Pytest 8.3.4": {
      "display_name": "Python 3.13, Pytest 8.3.4",
      "filename_extension": [
        ".py"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_pytest:756400c",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# --------------------------------------------------------------\n# Print a short summary of each test to stdout.\n# Can produde a lot of output on parameterized tests.\nexport PYTEST_ADDOPTS=\"-v\"\n\n# --------------------------------------------------------------\n# By default pytest captures stdout/stderr.\n# The --capture=tee-sys option ensures sys.stdout and\n# sys.stderr are actually written to.\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module pytest \\\n  --capture=tee-sys \\\n  --random-order-bucket=global \\\n    *test*.py\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.py": {
          "content": "'''The starting files are unrelated to the exercise.\n\nThey show examples of writing and testing\n  o) a global function\n  o) an instance method\nPick the style most suitable to your exercise.\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"
        },
        "test_hiker.py": {
          "content": "from hiker import global_answer, Hiker\n\ndef test_global_function():\n    assert global_answer() == 42\n\ndef test_instance_method():\n    assert Hiker().instance_answer() == 42\n"
        }
      }
    },
    "Python 3.13, approval-unittest 14.3": {
      "display_name": "Python 3.13, approval-unittest 14.3",
      "filename_extension": [
        ".py",
        ".approved.txt",
        ".received.txt"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_approval_unittest:57d8b07",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "HikerTest.test_global.approved.txt": {
          "content": "42\n"
        },
        "HikerTest.test_instance.approved.txt": {
          "content": "42\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# https://github.com/approvals/ApprovalTests.Python\n# https://approvaltests.com/\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module unittest \\\n  *test*.py\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.py": {
          "content": "'''The starting files are unrelated to the exercise.\n\nThey simply show syntax for writing and testing\n  o) a global function\n  o) an instance method\nPick the style that best fits the exercise.\nThen delete the other one, along with this comment!\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"
        },
        "test_hiker.py": {
          "content": "from hiker import global_answer, Hiker\nimport unittest\nfrom approvaltests.approvals import verify\nfrom approvaltests.reporters.report_on_cyber_dojo import ReportOnCyberDojo\nfrom approvaltests import set_default_reporter\n\n\nclass HikerTest(unittest.TestCase):\n    def setUp(self):\n        set_default_reporter(ReportOnCyberDojo())\n\n    # if you want to change the expected result, \n    # move HikerTest.test_global.recieved.txt\n    # to   HikerTest.test_global.approved.txt\n    # to view the differences, \n    # open HikerTest.test_global.diff\n\n    def test_global(self):\n        result = str(global_answer())\n        verify(result)\n\n    def test_instance(self):\n        result = str(Hiker().instance_answer())\n        verify(result)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
        }
      }
    },
    "Python 3.13, assert": {
      "display_name": "Python 3.13, assert",
      "filename_extension": [
        ".py"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_assert:1d2e95b",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n    *test*.py\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.py": {
          "content": "'''The starting files are unrelated to the exercise.\n\nThey simply show syntax for writing and testing\n  o) a global function\n  o) an instance method\nPick the style that best fits the exercise.\nThen delete the other one, along with this comment!\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"
        },
        "test_hiker.py": {
          "content": "from hiker import global_answer, Hiker\n\ndef test_global_function():\n    assert global_answer() == 42\n\ndef test_instance_method():\n    assert Hiker().instance_answer() == 42\n\ndef green_traffic_light_pattern():\n    return 'All tests passed'\n\n\nif __name__ == '__main__':\n    test_global_function()\n    test_instance_method()\n    print(green_traffic_light_pattern())\n"
        }
      }
    },
    "Python 3.13, behave 1.2.6": {
      "display_name": "Python 3.13, behave 1.2.6",
      "filename_extension": [
        ".py",
        ".feature"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_behave:e41f08e",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module behave --no-color\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.feature": {
          "content": "\nFeature: hitch-hiker playing scrabble\n\nScenario: earthling playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n"
        },
        "hiker.py": {
          "content": "class Hiker:\n\n    def answer(self, first, second):\n        return first * second\n"
        },
        "steps/hiker_steps.py": {
          "content": "from behave import *\nfrom hiker import Hiker\n\n\n@given(u'the hitch-hiker selects some tiles')\ndef step_impl(context):\n    pass\n\n\n@when(u'they spell {tile1:d} times {tile2:d}')\ndef step_impl(context, tile1, tile2):\n    douglas = Hiker()\n    context.tileproduct = douglas.answer(tile1, tile2)\n\n\n@then(u'the score is {answer:d}')\ndef step_impl(context, answer):\n    assert context.tileproduct is answer\n"
        }
      }
    },
    "Python 3.13, pytest-approvaltests 0.2.4-14.3": {
      "display_name": "Python 3.13, pytest-approvaltests 0.2.4-14.3",
      "filename_extension": [
        ".py",
        ".approved.txt",
        ".received.txt"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_approval_pytest:f057b9a",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# https://github.com/approvals/ApprovalTests.Python\n# https://approvaltests.com/\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module pytest \\\n  --random-order-bucket=global \\\n    --approvaltests-use-reporter='PythonNative'\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.py": {
          "content": "'''The starting files are unrelated to the exercise.\n\nThey simply show syntax for writing and testing\n  o) a global function\n  o) an instance method\nPick the style that best fits the exercise.\nThen delete the other one, along with this comment!\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"
        },
        "test_hiker.py": {
          "content": "from hiker import global_answer, Hiker\n\nfrom approvaltests import verify, Options\nfrom approvaltests.inline.inline_options import InlineOptions\n\noptions = Options().inline(InlineOptions.semi_automatic())\n\n\ndef test_global():\n    \"\"\"\n    42\n    \"\"\"\n    result = str(global_answer())\n    verify(result, options=options)\n\n\ndef test_instance():\n    \"\"\"\n    42\n    \"\"\"\n    result = str(Hiker().instance_answer())\n    verify(result, options=options)\n"
        }
      }
    },
    "Python 3.13, unittest": {
      "display_name": "Python 3.13, unittest",
      "filename_extension": [
        ".py"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/python_unittest:417d013",
      "progress_regexs": [
        "FAILED \\(failures=\\d+\\)",
        "OK"
      ],
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module unittest \\\n  *test*.py\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"
        },
        "hiker.py": {
          "content": "'''The starting files are unrelated to the exercise.\n\nThey simply show syntax for writing and testing\n  o) a global function\n  o) an instance method\nPick the style that best fits the exercise.\nThen delete the other one, along with this comment!\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"
        },
        "test_hiker.py": {
          "content": "from hiker import global_answer, Hiker\nimport unittest\n\n\nclass TestHiker(unittest.TestCase):\n\n    def test_global_function(self):\n        self.assertEqual(42, global_answer())\n\n    def test_instance_method(self):\n        self.assertEqual(42, Hiker().instance_answer())\n\n\nif __name__ == '__main__':\n    unittest.main()  # pragma: no cover\n"
        }
      }
    },
    "R, RUnit": {
      "display_name": "R, RUnit",
      "filename_extension": [
        ".R"
      ],
      "image_name": "cyberdojofoundation/r_runit:7b1a16f",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "Rscript *.tests.R"
        },
        "hiker.R": {
          "content": "\r\nanswer <- function() {\r\n    return(6 * 9)\r\n}\r\n"
        },
        "hiker.tests.R": {
          "content": "library(RUnit)\nsource('hiker.R')\n\ncheckEquals(42, answer())\n\nprint(\"All tests passed\")"
        }
      }
    },
    "ReScript, jest": {
      "display_name": "ReScript, jest",
      "filename_extension": [
        ".re"
      ],
      "image_name": "cyberdojofoundation/rescript_node_jest:fbf254d",
      "max_seconds": 20,
      "tab_size": 3,
      "visible_files": {
        "bsconfig.json": {
          "content": "{\n  \"name\": \"hiker\",\n  \"version\": \"0.1.0\",\n  \"sources\": {\n    \"dir\": \"src\",\n    \"subdirs\": true\n  },\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".bs.js\",\n  \"bs-dependencies\": [\n    \"@glennsl/bs-jest\"\n  ],\n  \"namespace\": true,\n  \"refmt\": 3\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# npm packages are in /etc/rescript/\n# The [npm run build] command transpiles files in this dir\n# so the current user (sandbox) must have write rights there.\n\nln -s /etc/rescript/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\n# --------------------------------------------------------------\nfunction cyber_dojo_exit()\n{\n  # Text files under /sandbox are automatically returned to the browser.\n  # So remove text files we don't want returned.\n  # 1) From cp command above\n  rm -rf ${CYBER_DOJO_SANDBOX}/node_modules\n  # 2) Generated files...\n  rm -rf ${CYBER_DOJO_SANDBOX}/lib\n  rm ${CYBER_DOJO_SANDBOX}/.merlin\n  find ${CYBER_DOJO_SANDBOX}/src -maxdepth 10 -type f -name \"*.bs.js\" -delete\n}\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# --------------------------------------------------------------\n\nnpm run build\nnpm run test\n"
        },
        "package.json": {
          "content": "{\n  \"name\":\"hiker\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"build\": \"bsb -make-world | strip-ansi\",\n    \"test\": \"jest --env=node\"\n  },\n  \"keywords\": [\n    \"BuckleScript\"\n  ],\n  \"devDependencies\": {},\n  \"dependencies\": {\n    \"@glennsl/bs-jest\": \"0.5.1\",\n    \"bs-platform\": \"8.3.1\",\n    \"jest\": \"26.6.1\"\n  },\n  \"jest\": {\n    \"testMatch\": [\n      \"**/*_spec.bs.js\"\n    ],\n    \"verbose\": false\n  }\n}\n"
        },
        "src/Hiker.re": {
          "content": "let answer = () => 6 * 9;\n"
        },
        "src/Hiker_spec.re": {
          "content": "open Jest;\nopen Expect;\n\ntest(\"to life the universe and everything\", () => {\n   expect(Hiker.answer()) |> toEqual(42)\n});\n"
        }
      }
    },
    "Ruby 3.4.1, Approval 0.0.26": {
      "display_name": "Ruby 3.4.1, Approval 0.0.26",
      "filename_extension": [
        ".rb",
        ".approved.txt",
        ".received.txt"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/ruby_approval:1c26599",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "coverage.rb": {
          "content": "require 'simplecov'\nrequire 'simplecov-console'\nrequire 'stringio'\n\nmodule SimpleCov\n  module Formatter\n    class FileWriter\n      def format(result)\n        stdout = capture_stdout {\n          SimpleCov::Formatter::Console.new.format(result)\n        }\n        `mkdir #{report_dir} 2> /dev/null`\n        IO.write(\"#{report_dir}/coverage.txt\", stdout)\n      end\n      def report_dir\n        \"#{ENV['CYBER_DOJO_SANDBOX']}/report\"\n      end\n      def capture_stdout\n        begin\n          uncaptured_stdout = $stdout\n          captured_stdout = StringIO.new('', 'w')\n          $stdout = captured_stdout\n          yield\n          $stdout.string\n        ensure\n          $stdout = uncaptured_stdout\n        end\n      end\n    end\n  end\nend\n\nSimpleCov.command_name(\"Approval\")\nSimpleCov.at_exit do\n  # Only create coverage report on green traffic-light\n  if SimpleCov.exit_status_from_exception === 0\n    SimpleCov::Formatter::FileWriter.new.format(SimpleCov.result)\n  end\nend\nSimpleCov.start\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text dirs/files we don't want returned.\n  cyber_dojo_delete_dirs coverage # ...\n  cyber_dojo_delete_files .approvals # ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# turn off colour for new coverage report\nexport NO_COLOR=1\n\n# Test output can be formatted as progress or documentation\nrspec . \\\n  --format progress \\\n  --no-color\n"
        },
        "hiker.rb": {
          "content": "\ndef answer\n  6 * 9\nend\n"
        },
        "hiker_hhgttg_answer.approved.txt": {
          "content": "42"
        },
        "hiker_spec.rb": {
          "content": "require_relative 'spec_helper'\nrequire_relative 'hiker'\n\ndescribe \"hiker\" do\n  context \"hhgttg\" do\n    it \"answer\" do\n      verify do\n        answer\n      end\n    end\n  end\nend\n"
        },
        "spec_helper.rb": {
          "content": "require_relative 'coverage'\nrequire 'approvals'\nrequire 'approvals/rspec'\n\nApprovals.configure do |config|\n  config.approvals_path = './'\nend\n\nRSpec.configure do |config|\n  config.add_setting :approvals_namer_class, {\n    :default => Approvals::Namers::RSpecNamer\n  }\n  config.add_setting :approvals_path, {\n    :default => './'\n  }\nend\n"
        }
      }
    },
    "Ruby 3.4.1, Cucumber 9.2": {
      "display_name": "Ruby 3.4.1, Cucumber 9.2",
      "filename_extension": [
        ".rb",
        ".feature"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/ruby_cucumber:c1d3969",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "coverage.rb": {
          "content": "require 'simplecov'\nrequire 'simplecov-console'\nrequire 'stringio'\n\nmodule SimpleCov\n  module Formatter\n    class FileWriter\n      def format(result)\n        stdout = capture_stdout {\n          SimpleCov::Formatter::Console.new.format(result)\n        }\n        `mkdir #{report_dir} 2> /dev/null`\n        IO.write(\"#{report_dir}/coverage.txt\", stdout)\n      end\n      def report_dir\n        \"#{ENV['CYBER_DOJO_SANDBOX']}/report\"\n      end\n      def capture_stdout\n        begin\n          uncaptured_stdout = $stdout\n          captured_stdout = StringIO.new('', 'w')\n          $stdout = captured_stdout\n          yield\n          $stdout.string\n        ensure\n          $stdout = uncaptured_stdout\n        end\n      end\n    end\n  end\nend\n\nSimpleCov.command_name(\"Cucumber\")\nSimpleCov.at_exit do\n  # Only create coverage report on green traffic-light\n  if SimpleCov.exit_status_from_exception === 0\n    SimpleCov::Formatter::FileWriter.new.format(SimpleCov.result)\n  end\nend\nSimpleCov.start\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs coverage # ...\n  # cyber_dojo_delete_files # ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# turn off colour in report/coverage.txt\nexport NO_COLOR=1\n\n# -r option has to be specified for each named file\nREQUIRES=\"\"\nfor file in *_steps.rb; do\n  REQUIRES+=\" -r ${file}\"\ndone\n\n# Test output can be formatted as progress or documentation\ncucumber --format progress . ${REQUIRES}\n"
        },
        "hiker.feature": {
          "content": "Feature: hitch-hiker playing scrabble\n\nScenario: earthling playing scrabble in the past\n  Given the hitch-hiker selects some tiles\n  When they spell 6 times 9\n  Then the score is 42\n"
        },
        "hiker.rb": {
          "content": "\ndef answer(lhs,rhs)\n  lhs * rhs\nend\n"
        },
        "hiker_steps.rb": {
          "content": "require_relative 'coverage'\nrequire_relative 'hiker'\n\nGiven /^the hitch-hiker selects some tiles$/ do\nend\n\nWhen /^they spell (\\d+) times (\\d+)$/ do |x, y|\n  @result = answer(x.to_i, y.to_i)\nend\n\nThen /^the score is (\\d+)$/ do |answer|\n  expect(answer.to_i).to eq(@result)\nend\n"
        }
      }
    },
    "Ruby 3.4.1, MiniTest 5.25": {
      "display_name": "Ruby 3.4.1, MiniTest 5.25",
      "filename_extension": [
        ".rb"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/ruby_mini_test:f945f74",
      "tab_size": 2,
      "visible_files": {
        "coverage.rb": {
          "content": "require 'simplecov'\nrequire 'simplecov-console'\nrequire 'stringio'\n\n$exception_raised = false\n\nmodule SimpleCov\n  module Formatter\n    class FileWriter\n      def format(result)\n        unless amber_traffic_light?\n          stdout = capture_stdout {\n            SimpleCov::Formatter::Console.new.format(result)\n          }\n          `mkdir #{report_dir} 2> /dev/null`\n          IO.write(\"#{report_dir}/coverage.txt\", stdout)\n        end\n      end\n      def amber_traffic_light?\n        $exception_raised\n      end\n      def report_dir\n        \"#{ENV['CYBER_DOJO_SANDBOX']}/report\"\n      end\n      def capture_stdout\n        begin\n          uncaptured_stdout = $stdout\n          captured_stdout = StringIO.new('', 'w')\n          $stdout = captured_stdout\n          yield\n          $stdout.string\n        ensure\n          $stdout = uncaptured_stdout\n        end\n      end\n    end\n  end\nend\n\nSimpleCov.command_name(\"MiniTest\")\nSimpleCov.formatter = SimpleCov::Formatter::FileWriter\nSimpleCov.start\n\nat_exit do\n  # Can't use SimpleCov.at_exit; when the call reaches\n  # FileWriter.format() there is no longer an exception\n  # I'd like to only write the coverage report if the\n  # traffic-light is green but it seems there is no way.\n  $exception_raised = true\nend\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs coverage # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# turn off colour for new coverage report\nexport NO_COLOR=1\n\nfor test_file in *test*.rb\ndo\n  ruby $test_file || true\ndone\n"
        },
        "hiker.rb": {
          "content": "# The starting files are unrelated to the exercise.\n#\n# They simply show syntax for writing and testing\n#  o) a global function\n#  o) an instance method\n# Pick the style that best fits the exercise.\n# Then delete the other one, along with this comment!\n\ndef global_answer\n  6 * 9\nend\n\nclass Hiker\n\n  def instance_answer\n    global_answer\n  end\n\nend\n"
        },
        "test_hiker.rb": {
          "content": "require_relative 'coverage'\nrequire_relative 'hiker'\nrequire 'minitest/autorun'\n\nclass TestHiker < Minitest::Test\n\n  def test_global_function\n    assert_equal 42, global_answer\n  end\n\n  def test_instance_method\n    assert_equal 42, Hiker.new.instance_answer\n  end\n\nend\n"
        }
      }
    },
    "Ruby 3.4.1, RSpec 3.13": {
      "display_name": "Ruby 3.4.1, RSpec 3.13",
      "filename_extension": [
        ".rb"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/ruby_rspec:69fb3ed",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "coverage.rb": {
          "content": "require 'simplecov'\nrequire 'simplecov-console'\nrequire 'stringio'\n\nmodule SimpleCov\n  module Formatter\n    class FileWriter\n      def format(result)\n        stdout = capture_stdout {\n          SimpleCov::Formatter::Console.new.format(result)\n        }\n        `mkdir #{report_dir} 2> /dev/null`\n        IO.write(\"#{report_dir}/coverage.txt\", stdout)\n      end\n      def report_dir\n        \"#{ENV['CYBER_DOJO_SANDBOX']}/report\"\n      end\n      def capture_stdout\n        begin\n          uncaptured_stdout = $stdout\n          captured_stdout = StringIO.new('', 'w')\n          $stdout = captured_stdout\n          yield\n          $stdout.string\n        ensure\n          $stdout = uncaptured_stdout\n        end\n      end\n    end\n  end\nend\n\nSimpleCov.command_name(\"RSpec\")\nSimpleCov.at_exit do\n  # Only create coverage report on green traffic-light\n  if SimpleCov.exit_status_from_exception === 0\n    SimpleCov::Formatter::FileWriter.new.format(SimpleCov.result)\n  end\nend\nSimpleCov.start\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs coverage # ...\n  # cyber_dojo_delete_files # ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# turn off colour for new coverage report\nexport NO_COLOR=1\n\n# Test output can be formatted as progress or documentation\nrspec . \\\n  --format progress \\\n  --no-color\n"
        },
        "hiker.rb": {
          "content": "# The starting files are unrelated to the exercise.\n#\n# They simply show syntax for writing and testing\n#  o) a global function\n#  o) an instance method\n# Pick the style that best fits the exercise.\n# Then delete the other one, along with this comment!\n\ndef global_answer\n  6 * 9\nend\n\nclass Hiker\n\n  def instance_answer\n    global_answer\n  end\n\nend\n"
        },
        "hiker_spec.rb": {
          "content": "require_relative 'coverage'\nrequire_relative 'hiker'\n\ndescribe \"hiker\" do\n\n  context \"global function example\" do\n    it \"multiplies correctly\" do\n      expect(global_answer).to eq(42)\n    end\n  end\n\n  context \"instance method example\" do\n    it \"multiplies correctly\" do\n      expect(Hiker.new.instance_answer).to eq(42)\n    end\n  end\n\nend\n"
        }
      }
    },
    "Ruby 3.4.1, Test::Unit": {
      "display_name": "Ruby 3.4.1, Test::Unit",
      "filename_extension": [
        ".rb"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/ruby_test_unit:c3a64a6",
      "max_seconds": 10,
      "tab_size": 2,
      "visible_files": {
        "coverage.rb": {
          "content": "require 'simplecov'\nrequire 'simplecov-console'\nrequire 'stringio'\n\nmodule SimpleCov\n  module Formatter\n    class FileWriter\n      def format(result)\n        stdout = capture_stdout {\n          SimpleCov::Formatter::Console.new.format(result)\n        }\n        `mkdir #{report_dir} 2> /dev/null`\n        IO.write(\"#{report_dir}/coverage.txt\", stdout)\n      end\n      def report_dir\n        \"#{ENV['CYBER_DOJO_SANDBOX']}/report\"\n      end\n      def capture_stdout\n        begin\n          uncaptured_stdout = $stdout\n          captured_stdout = StringIO.new('', 'w')\n          $stdout = captured_stdout\n          yield\n          $stdout.string\n        ensure\n          $stdout = uncaptured_stdout\n        end\n      end\n    end\n  end\nend\n\nSimpleCov.command_name \"Test::Unit\"\nSimpleCov.at_exit do\n  # I'd like to only write the coverage report if the\n  # traffic-light is green but it seems there is no way.\n  if $!.is_a?(SystemExit) # !amber-traffic-light\n    SimpleCov::Formatter::FileWriter.new.format(SimpleCov.result)\n  end\nend\nSimpleCov.start\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs coverage # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# turn off colour for new coverage report\nexport NO_COLOR=1\n\nfor test_file in *test*.rb\ndo\n  ruby $test_file || true\ndone\n"
        },
        "hiker.rb": {
          "content": "# The starting files are unrelated to the exercise.\n#\n# They simply show syntax for writing and testing\n#  o) a global function\n#  o) an instance method\n# Pick the style that best fits the exercise.\n# Then delete the other one, along with this comment!\n\ndef global_answer\n  6 * 9\nend\n\nclass Hiker\n\n  def instance_answer\n    global_answer\n  end\n\nend\n"
        },
        "test_hiker.rb": {
          "content": "require_relative 'coverage'\nrequire_relative 'hiker'\nrequire 'test/unit'\n\nclass TestHiker < Test::Unit::TestCase\n\n  def test_global_function\n    assert_equal 42, global_answer\n  end\n\n  def test_instance_method\n    assert_equal 42, Hiker.new.instance_answer\n  end\n\nend\n"
        }
      }
    },
    "Rust 1.84, test": {
      "display_name": "Rust 1.84, test",
      "filename_extension": [
        ".rs"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/rust_test:e5e2739",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Cargo.toml": {
          "content": "[package]\nname = \"hiker\"\nversion = \"0.1.0\"\nauthors = [\"sandbox\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n[features]\nstrict = [] # Treat warnings as a build error.\n"
        },
        "cyber-dojo.sh": {
          "content": "set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs target # ...\n  cyber_dojo_delete_files Cargo.lock  # ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n\n# ------------------------------------------------------------------------\nPATH=/usr/local/cargo/bin:${PATH}\n#RUST_BACKTRACE=1\n\nrm -rf report || true\nmkdir report 2> /dev/null || true\ncargo test --features \"strict\" -- --nocapture\ncargo clippy 2>> ./report/style.txt\ncargo fmt\n"
        },
        "src/lib.rs": {
          "content": "#![cfg_attr(feature = \"strict\", deny(warnings))]\n\npub fn answer() -> i32 {\n    6 * 9\n}\n"
        },
        "tests/lib_tests.rs": {
          "content": "#![cfg_attr(feature = \"strict\", deny(warnings))]\n\nuse hiker;\n\n#[test]\nfn life_the_universe_and_everything() {\n    assert_eq!(42, hiker::answer());\n}\n"
        }
      }
    },
    "Swift, Swordfish": {
      "display_name": "Swift, Swordfish",
      "filename_extension": [
        ".swift"
      ],
      "image_name": "cyberdojofoundation/swift_swordfish:5f3d03f",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "#!/bin/bash -Eeu\n\nswiftc *.swift && ./main\n"
        },
        "hiker.swift": {
          "content": "class Hiker {\n    func answer() -> Int {\n        return 6 * 9\n    }\n}\n"
        },
        "hikertests.swift": {
          "content": "// For more information on the excellent Swordfish test framework\n// see https://github.com/philsquared/Swordfish\n\nclass HikerTests: SwordfishTests {\n  var hiker : Hiker!\n\n  override func setUp() {\n    super.setUp()\n    hiker = Hiker()\n  }\n\n  func testLife_the_universe_and_everything() {\n    require() | hiker.answer() == 42\n  }\n}\n\nextension HikerTests {\n  static var allTests : [(String, (HikerTests) -> () throws -> Void)] {\n    var name = \"testLife_the_universe_and_everything\"\n    var fun = testLife_the_universe_and_everything\n    return [ (name, fun), ]\n  }\n}\n"
        },
        "main.swift": {
          "content": "import XCTest\n\nXCTMain([ testCase(HikerTests.allTests) ])\n"
        },
        "swordfish.swift": {
          "content": "// Swordfish\n// By Phil Nash\n//\n// Include this file into a test target folder of a Swift project to use\n//\n// The repository is hosted at: https://github.com/philsquared/Swordfish\n// This project is licensed under the BSD 2-Clause License\n// See the associated LICENSE file in the root of this repository\n\nimport XCTest\n\npublic class SwordfishTests : XCTestCase {}\n\n\n// Holds the LHS of the expression (as well as the auxiliary info,\n// message, file and line) and provides overloads for comparison\n// operators that forward on to XCTAssert...\n// - as with Assertion, we should be able to capture rhs by @autoclosure\npublic struct ExprLhs<T : Equatable> {\n    let msg : String\n    let lhs : T\n    let file: StaticString\n    let line: UInt\n\n    func assertEqual( _ rhs: T ) {\n        XCTAssertEqual( lhs, rhs, msg, file:file, line: line )\n    }\n    func assertNotEqual( _ rhs: T ) {\n        XCTAssertNotEqual( lhs, rhs, msg, file:file, line: line )\n    }\n    public static func ==( lhsExpr : ExprLhs, rhs: T ) {\n        lhsExpr.assertEqual( rhs )\n    }\n    public static func !=( lhsExpr : ExprLhs, rhs: T ) {\n        lhsExpr.assertNotEqual( rhs )\n    }\n}\n\n// For now the only role of this type is to allow | to be overloaded, and\n// pass on the message, file and line to the start of the expression object\npublic struct Assertion {\n    let msg : String\n    let file: StaticString\n    let line: UInt\n\n    // We're capturing the LHS value eagerly, but we should be able to capture\n    // as an @autoclosure\n    public static func | <T>(assertion: Assertion, lhs: T) -> ExprLhs<T> {\n        return ExprLhs(msg: assertion.msg, lhs: lhs, file: assertion.file, line: assertion.line )\n    }\n}\n\n// Captures an optional message, as well as file/ line number and bundles that up\n// in an Assertion object\npublic func require( _ msg : String = String(), file: StaticString = #file, line: UInt = #line ) -> Assertion {\n    return Assertion( msg: msg, file: file, line: line )\n}"
        }
      }
    },
    "Swift, XCTest": {
      "display_name": "Swift, XCTest",
      "filename_extension": [
        ".swift"
      ],
      "image_name": "cyberdojofoundation/swift_xctest:1f5382e",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "#!/bin/bash -Eeu\n\nswiftc *.swift && ./main\n"
        },
        "hiker.swift": {
          "content": "class Hiker {\n    func answer() -> Int {\n        return 6 * 9\n    }\n}\n"
        },
        "hikertests.swift": {
          "content": "import XCTest\n\nclass HikerTests: XCTestCase {\n  var hiker : Hiker!\n\n  override func setUp() {\n    super.setUp()\n    hiker = Hiker()\n  }\n\n  func testLife_the_universe_and_everything() {\n    XCTAssertEqual(hiker.answer(), 42)\n  }\n}\n\nextension HikerTests {\n  static var allTests : [(String, (HikerTests) -> () throws -> Void)] {\n    var name = \"testLife_the_universe_and_everything\"\n    var fun = testLife_the_universe_and_everything\n    return [ (name, fun), ]\n  }\n}\n"
        },
        "main.swift": {
          "content": "import XCTest\n\nXCTMain([ testCase(HikerTests.allTests) ])\n"
        }
      }
    },
    "TypeScript, jest": {
      "display_name": "TypeScript, jest",
      "filename_extension": [
        ".ts"
      ],
      "image_name": "cyberdojofoundation/typescript_node_jest:4ddf46a",
      "max_seconds": 20,
      "tab_size": 2,
      "visible_files": {
        ".eslintrc.js": {
          "content": "module.exports = {\n  extends: [\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier/@typescript-eslint\",\n    \"plugin:prettier/recommended\",\n  ],\n  parser: \"@typescript-eslint/parser\",\n  parserOptions: {\n    project: \"tsconfig.json\",\n    sourceType: \"module\",\n  },\n}\n"
        },
        "cyber-dojo.sh": {
          "content": "# jest cannot use ts-jest when installed globally.\n# npm packages are in /etc/ts/\n# We have to create a local symlink.\nln -s /etc/ts/node_modules ${CYBER_DOJO_SANDBOX}/node_modules\n\nfunction cyber_dojo_exit()\n{\n  # Ensure the symlink is removed.\n  unlink ${CYBER_DOJO_SANDBOX}/node_modules\n}\ntrap cyber_dojo_exit EXIT SIGTERM\n\nnpm run typecheck || exit 42\n\n#Uncomment this line to enable linting.\n#Note: this will slow down the test.\n#npm run lint\n\nnpm run test\n"
        },
        "hiker.test.ts": {
          "content": "import { answer } from './hiker';\n\ndescribe('answer', () => {\n  it('to life the universe and everything', () => {\n    expect(answer()).toEqual(42);\n  });\n});\n"
        },
        "hiker.ts": {
          "content": "export function answer(): number {\n  return 6 * 9;\n}\n"
        },
        "jest.config.js": {
          "content": "module.exports = {\n  transform: {\n    \"^.+\\\\.tsx?$\": \"ts-jest\",\n  },\n  testEnvironment: \"node\",\n  testRegex: \".*test\\\\.(t|j)sx?$\",\n  moduleFileExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"]\n};\n"
        },
        "package.json": {
          "content": "{\n  \"scripts\": {\n      \"test\": \"jest --maxWorkers=2\",\n      \"lint\": \"eslint --fix **/*.ts\",\n      \"typecheck\": \"tsc --noEmit\"\n  }\n}\n"
        },
        "tsconfig.json": {
          "content": "{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n"
        }
      }
    },
    "VHDL, assert": {
      "display_name": "VHDL, assert",
      "filename_extension": [
        ".vhdl"
      ],
      "image_name": "cyberdojofoundation/vhdl_assert:6629459",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "# Imports all vhdl files into workspace\nrm work-obj93.cf\nghdl -i *.vhdl\n\n# Scrapes the workspace file for all entity names\nentities=$(grep entity work-obj93.cf | cut -d \\  -f 4)\necho $entities;\n\n# Compilation step\ncompilation_successful=true\nfor entity in $entities; do\n   if ! ghdl -m $entity; then\n      compilation_successful=false\n   fi\ndone\n\nif [ \"$compilation_successful\" = false ] ; then\n   echo \"Encountered a compilation error\"\n   exit 1\nfi\n\n# Simulation step\nsimulation_successful=true\nfor entity in $entities; do\n   if ! ghdl -r $entity; then\n      simulation_successful=false\n   fi\ndone\n\nif [ \"$simulation_successful\" = true ] ; then\n   echo \"All tests passed!\"\n   exit 0\nfi\n\nexit 1\n"
        },
        "hiker.vhdl": {
          "content": "library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity hiker is \n   port (meaning_of_life : out std_logic_vector (7 downto 0));\nend hiker;\n\narchitecture dataflow of hiker is\nbegin\n   meaning_of_life <= \"00110110\";  -- 54\nend dataflow;\n\n\n"
        },
        "hiker_testbench.vhdl": {
          "content": "library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity hiker_testbench is\nend hiker_testbench;\n\narchitecture test_fixture of hiker_testbench is\n   signal meaning_of_life_test : std_logic_vector (7 downto 0);\nbegin\n   UUT: entity work.hiker port map (meaning_of_life_test);\n\n   process \n   begin\n       wait for 1 ns; -- Signal propagation\n       assert (meaning_of_life_test = \"00101010\") -- 42\n               report \"Meaning of life value incorrect\"\n               severity failure;\n       \n       assert false report \"End of test\" severity note;\n       wait;\n   end process;\nend test_fixture;\n"
        }
      }
    },
    "VisualBasic, NUnit": {
      "display_name": "VisualBasic, NUnit",
      "filename_extension": [
        ".vb"
      ],
      "image_name": "cyberdojofoundation/visual_basic_nunit:003c9f0",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "Hiker.vb": {
          "content": "\nPublic Class Hiker\n\n    Public Shared Readonly Property Answer() As Integer\n        Get\n            Return 6 * 9\n        End Get\n    End Property\n\nEnd Class\n"
        },
        "HikerTest.vb": {
          "content": "\nImports NUnit.Framework\n\n<TestFixture()> _\nPublic Class HikerTest\n\n    <Test()>\n    Public Sub life_the_universe_and_everything()\n        Rem a simple example to start you off\n        Assert.AreEqual(42, Hiker.Answer)\n    End Sub\n\nEnd Class\n"
        },
        "cyber-dojo.sh": {
          "content": "\n# ------------------------------------------------------------------------\n# cyber-dojo returns text files under /sandbox that are\n# created/deleted/changed. In tidy_up you can remove any\n# such files you don't want returned to the browser.\n\ntrap tidy_up EXIT\n\nfunction tidy_up()\n{\n  delete_files TestResult.xml\n}\n\nfunction delete_dirs()\n{\n  for dirname in \"$@\"\n  do\n      rm -rf \"${dirname}\" 2> /dev/null || true\n  done\n}\n\nfunction delete_files()\n{\n  for filename in \"$@\"\n  do\n      rm \"${filename}\" 2> /dev/null || true\n  done\n}\n\n# ------------------------------------------------------------------------\nreadonly NUNIT_PATH=/usr/lib/cli/nunit.framework-2.6.3\n\nvbnc -nologo \\\n  -t:library \\\n  -r:${NUNIT_PATH}/nunit.framework.dll \\\n    -out:RunTests.dll *.vb\n\nif [ $? -eq 0 ]; then\n  nunit-console -nologo RunTests.dll\nfi\n"
        }
      }
    },
    "Zig, test": {
      "display_name": "Zig, test",
      "filename_extension": [
        ".zig"
      ],
      "image_name": "cyberdojofoundation/zig_test:274f9c3",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "\n# ------------------------------------------------------------------------\n# cyber-dojo returns text files under /sandbox that are\n# created/deleted/changed. In tidy_up you can remove any\n# such files you don't want returned to the browser.\n\ntrap tidy_up EXIT\n\nfunction tidy_up()\n{\n  delete_dirs zig-cache\n}\n\nfunction delete_dirs()\n{\n  for dirname in \"$@\"\n  do\n      rm -rf \"${dirname}\" 2> /dev/null || true\n  done\n}\n\nfunction delete_files()\n{\n  for filename in \"$@\"\n  do\n      rm \"${filename}\" 2> /dev/null || true\n  done\n}\n\n# ------------------------------------------------------------------------\nzig test test-*.zig\n"
        },
        "hiker.zig": {
          "content": "\npub fn answer() i32 {\n    return 6 * 9;\n}\n"
        },
        "test-hiker.zig": {
          "content": "const std = @import(\"std\");\nconst assert = std.debug.assert;\n\nconst answer = @import(\"hiker.zig\").answer;\n\ntest \"the answer to life the universe and everything\" {\n    assert(answer() == 42);\n}\n"
        }
      }
    },
    "jq 1.7.1, approvals": {
      "display_name": "jq 1.7.1, approvals",
      "filename_extension": [
        ".jq"
      ],
      "image_name": "ghcr.io/cyber-dojo-languages/jq_approvals:fd90648",
      "max_seconds": 10,
      "tab_size": 4,
      "visible_files": {
        "cyber-dojo.sh": {
          "content": "\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n# 1. Only return _newly_ generated reports.\ncyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n# 2. Remove text files we don't want returned.\ncyber_dojo_delete_dirs .pytest_cache # ...\n#cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\n# Verify the JQ inputs for validity/correctness\nsource /jq/verify-jq.sh\nmain\n"
        },
        "hiker.jq": {
          "content": "def answer:\n    6 * 9;\n"
        },
        "test_hiker.jq": {
          "content": "include \"hiker\";\n\ndef test_life_the_universe_and_everything:\n    answer;\n"
        },
        "test_hiker.test_life_the_universe_and_everything.approved": {
          "content": "42\n"
        }
      }
    }
  }
}
