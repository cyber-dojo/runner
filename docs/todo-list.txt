
BIGGER
======
Speedup - deployment stages....
 - cat stdout/stderr to files (and echo those back to stdout/stderr)
 - write sss to tar file and tgz that.
 - pipe the echo_textfilenames script into stdin and extract it then run it?
 - echo fully pathed filenames (unrooted) into tar
 - merge two docker execs into one.


readonly containers
-------------------
Make TMP-FS for /home/sandbox
Further, if the docker-run used --read-only it would mean
all LTFs were using /tmp and /sandbox only.
That would even make it possible to recycle containers.
You'd only really need to clear out /tmp and /sandbox.
They should be readonly anyway...
What happens to tests with --read-only added...
Only 2 failures
TrafficLightTest
9DB Ubuntu L23
9DD Ubuntu L41
Access to the path /home/sandbox/.mono is denied.
Need to make another tmp-fs for /home/sandbox
TMP_FS_HOME_DIR = "--tmpfs /home/sandbox:exec,size=50M,uid=#{UID},gid=#{GID}"
--read-only
And all pass :-)
Need to try on all LTFs

Image_name:TAG
--------------
  - will now acts as key for cache holding the rag-lambdas.

RAG Lambdas in Python
--------------------
  - visible_files can contain red_amber_green.rb !!!!!
    If present, and different to cached source, then could use it inside
    a runner call that uses Ruby image. This opens up the option of
    allowing lambdas in other languages. Eg Python. Based on the extension.
    And use a known python image.


SMALLER
=======
logger.warning()?
logger.info()?
logger.error()?

TarWriter has this...
  @writer.add_file_simple(filename, 0o644, size) do |fd|
  Perhaps I could set cyber-dojo.sh to +x automatically?
  Might allow a clean command line.

rescue Errno::ESRCH ; 200; add logging

TGZ exception test ; 500; add StdoutWriter

create a custom BashStub which has methods for the specific bash calls...
      1) docker run --entrypoint=""
      2) docker exec to run cyber-dojo.sh
      3) docker exec to extract text files
      4) docker run --entrypoint=cat to get rag-lambda

uncomment multi_os_test '62B'  Robustness

uncomment c_assert_test 'AB6   RackDispatcher

Dispatcher test that mimics config.ru setup
  Use BashStub.
  Make 2 calls
  Verify stub only gets asked to cat ragfile from image once


---------------------------------------------------------------------

  class CustomBashStub
    def initialize
      @stubs = {}
    end
    def stub_docker_run(stdout, stderr, status)
      @stubs[:cyber_dojo_sh] = { stdout:stdout, stderr:stderr, status:status }
    end
    def stub_cyber_dojo_sh(stdout, stderr, status) # NO THIS IS Process.spawn()
      @stubs[:cyber_dojo_sh] = { stdout:stdout, stderr:stderr, status:status }
    end
    def stub_read_textfiles(tgz)
      @stubs[:tgz] = tgz
    end
    def stub_docker_cat(rag_lambda)
      @stubs[:rag_lambda] = rag_lambda
    end
    def assert(command)
      if command.include?('sleep')
        [@stdout,@stderr,@status]
      end
    end
    def exec(command)
    end
  end
