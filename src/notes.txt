
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Stateful runner?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
I was considering adding a new type parameter to runner.run_cyber_dojo_sh
eg type="stateful" and have it default to "stateless".
Then for stateful, mount a docker-volume associated with the id.
The big problem with this is that on k8s runner is a Daemonset.
This means you don't know which node's runner a [test] will end up on.
There is also the problem of how to limit the size of a docker volume?
https://stackoverflow.com/questions/52089499/create-docker-volume-with-limited-size
https://stackoverflow.com/questions/40494536/how-specify-the-size-of-a-shared-docker-volume/40499023#40499023
Then reinstate the collector service and a collector job to cron.
But that's all too complex.
I have fixed Catch by baking catch.hpp's .o file into the Docker image.


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Trying to use a non root user (called runner) when running the container...
Problem. Need permission to run /var/run/docker.sock
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

On DockerToolbox for Mac, on the default VM
/etc/group has docker group with gid=100
This means /var/run/docker.sock has a gid=100
On an Alpine image (such as this), /etc/group
has a group called users with gid=100
So I just need to make my runner user a member of users!

Obvious problem with this is that the docker group
has different gids on different OS's.
For example, on Ubuntu 16.04 (in Google Computer Engine)
/etc/group also has a group called users with gid=100
but its docker group has a gid of 999
I can hack-solve that by making the user a member
of _multiple_ groups, each of which has the gid for
docker on a particular OS

RUN adduser runner users
